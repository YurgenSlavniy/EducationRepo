print('first you read this')
# пайчарм позволяет нам изменять настройки шрифта, также можно изменять темы.
# когда у нас код написан, попробуем запустить наш файл. ПКМ --> run (ctrl shift f10)
# внизу у нас будет открываться окно в котором м будем смотреть как работает программа
# таким образом удобно сразу изменять программу и смотреть на результат
# запускаем заново и видим у нас есть 2 строчки - first you read this
#######################################################################################
import sys

print(sys.argv[0])
# следствие выполнения -> узнаем путь где находится наш файл
# C:/Users/777/Desktop/практика/python/educationCourseAll.py/pr1helloworld.py
#######################################################################################
import sys

for arg in sys.argv:
    print(arg + " : " + type(arg))
#######################################################################################
# """
# параметр ping - > функция выводит pong
# 2 параметра name и имя человека <Имя> - > функция приветствия пользователя
# параметр list показать содержтимое текущей директории
# """

import sys, os

def ping():
    print('PonG')

def hello(name):
    print('Приветствую ', name)

def get_info():
    print(os.listdir())

comand = sys.argv[1]

if comand == 'ping':
    ping()
elif comand == 'list':
    get_info()
elif comand == 'name':
    name = sys.argv[2]
    hello(name)
#######################################################################################
# Запросить у пользовтеля число, сохранить в переменную,
# прибавить к числу 2, вывести результат на экран

a = int(input('Введите целое положительное число '))
a = a + 2
print('результат ', a)
#######################################################################################
# Используя цикл, запрашивайте у пользователя число, пока оно не станет больше 0, 
# но меньше 10. После того, как пользователь введет корректное число, 
# возведите его в степень 2 и выведите на экран.

number = int(input('Введите пожалуйста число'))

if number >= 10:
    print('Забыл предупредить число от 0 до 10')
else:
    print('Возвожу в степень 2 и получаю ', number**2)

print('вариант для программки с циклом')
number = int(input('Введите пожалуйста число'))
while number >= 10:
    print('Забыл предупредить число от 0 до 10')
    number = int(input('Введите пожалуйста число'))
print('Возвожу в степень 2 и получаю ', number ** 2)
print('---->')
#######################################################################################
# Создайте программу “Медицинская анкета”, 
# где вы запросите у пользователя следующие данные: имя, фамилия, возраст и вес.
# Выведите результат согласно которому:
# Пациент в хорошем состоянии, если ему до 30 лет и вес от 50 и до 120 кг,
# Пациенту требуется заняться собой, если ему более 30 и вес меньше 50 или больше 120 кг
# Пациенту требуется врачебный осмотр, если ему более 40 и вес менее 50 или больше 120 кг.
# Все остальные варианты вы можете обработать на ваш вкус и полет фантазии.

# (Формула не соответствует реальной действительности и здесь используется только ради примера)
# Примечание: при написание программы обратите внимание на условия в задаче и в вашем коде.  
# Протестируйте программу несколько раз и убедитесь, что проверки срабатывают верно. 
# В случае ошибок, уточните условия для той или иной ситуации.
# Пример: Вася Пупкин, 29 год, вес 90 - хорошее состояние
# Пример: Вася Пупкин, 31 год, вес 121 - следует заняться собой
# Пример: Вася Пупкин, 31 год, вес 49 - следует заняться собой
# Пример: Вася Пупкин, 41 год, вес 121 - следует обратится к врачу!
# Пример: Вася Пупкин, 41 год, вес 49 - следует обратится к врачу!

print('Medical questionnaire. Медицинский опросник')
print('---->')

name = input('What is name? Введите имя: ')
surname = input('What is surname? Введите фамилию: ')
age = int(input('How old ? Каков возраст?'))
mas = int(input('What is weigth? Сколько весит?'))

if age <= 30 and mas >= 50 and mas <= 120:
    print('Имя:', name, ', Фамилия:', surname, ', Возраст:', age, ', Вес:', mas, ' ---> Хорошее состояние ')
elif age > 30 and age < 40 and mas < 50 or mas > 120 and age > 30 and age < 40:
    print('Имя:', name, ', Фамилия:', surname, ', Возраст:', age, ', Вес:', mas, ' ---> Следует заняться собой ')
elif age >= 40 and mas <= 50 or mas >= 120 and age >=40:
    print('Имя:', name, ', Фамилия:', surname, ', Возраст:', age, ', Вес:', mas,' ---> Требуется врачебный осмотр ')
else:
    print('Имя:', name, ', Фамилия:', surname, ', Возраст:', age, ', Вес:', mas,)
#######################################################################################
# Запросить у пользовтеля число, сохранить в переменную,
# прибавить к числу 2, вывести результат на экран

a = int(input('Введите число: ')) # Создадим переменную a , воспользуемся фунуцией input и попросим пользователя ввести число.
# в переменную a мы присваиваем значение которое ввёл пользователь.
# C помощью функции int() преобразуем строковый тип данных в числовой.
print(a + 2) # выводим на экран результат математической операции
#######################################################################################
# Используя цикл, запрашивайте у пользователя число, пока оно не станет больше 0, 
# но меньше 10. После того, как пользователь введет корректное число, 
# возведите его в степень 2 и выведите на экран.

while True: # Воспользуемся конструкцией while True: цикл будет крутиться, пока мы не воспользуемся командой break.
    number = int(input('Введите число: ')) # Внутри цикла объявляем переменную number и присваиваем ей значение, которое вводит пользователь и преобразуем это значение в числовой тип данных с помощью int()
    if number >= 0 and number <= 10: # Далее ЕСЛИ это число БОЛЬШЕ 0 И МЕНЬШЕ 10
        print('возводим в степень 2 ваше число: ', number**2) # печатаем сообщение 'возводим в степень 2 ваше число' и проделываем математическую операцию number**2
# Вывводим результат на пользователю : сообщение и число возведённое в степень 2.
        break # после вывода сообщения выходим из цикла,
    else: # если первое условие не выполнилось, то есть введёное число больше 10 или меньше 0 , мы выполняем условие else
        print('Нужно ввести число от 0 до 10') # выводим на экран сообщение. Второе условие, как программа действует, когда первое условие не выполнено.
# мы выводим сообщение , но из цикла не выходим, тк условие выхода из цикла не выполнено, и повторно должны вводить число.
#######################################################################################
# Создайте программу “Медицинская анкета”, где вы запросите у пользователя следующие данные: имя, фамилия, возраст и вес.
# Выведите результат согласно которому:
# Пациент в хорошем состоянии, если ему до 30 лет и вес от 50 и до 120 кг,
# Пациенту требуется заняться собой, если ему более 30 и вес меньше 50 или больше 120 кг
# Пациенту требуется врачебный осмотр, если ему более 40 и вес менее 50 или больше 120 кг.

name = input('Введите имя: ')
surname = input('Введите фамилию: ')
age = int(input('Каков возраст?'))
mas = int(input('Сколько весит?'))
# сперва организуем ввод данных, создадим переменные которым присвоются значения вводимые пользователем. Причём для переменных age и mas указываем тип данных целое число int()
# с помощью функции input запрашиваем у пользователя ввести данные. После того когда у нас есть данные, начинаем проверять условия
if age <= 30 and mas >= 50 and mas <= 120: # начинаем проверять условия - возраст <= 30 логический оператр and (И), вес больше или равно 50 И (and) вес МЕНЬШЕ или равно 120
    print(name, surname, age, ' год ', ' вес ', mas, '---> Хорошее состояние')# для начала выведим результат и после того как всё проверим добавим ещё вывод имени, фамилии, возраста, веса
elif age > 30 and age < 50 and mas < 50 and mas > 120: # после проверки первого условия, начинаем проверять следующее условие. age >= 30 and mas <= 50 and mas >= 120:
    print(name, surname, age, ' год ', ' вес ', mas, '---> Следует заняться собой') # если условия второй проверки оказались Истиной - выводим соответствующее сообщение.  И идём на следующую проверку
elif age >= 50 and mas < 50 and mas > 120: # производим третью проверку условий и выводим на экран соотвтетствующее сообщения, если условия Верны.
    print(name, surname, age, ' год ', ' вес ', mas, '---> Следует обратиться к врачу')
# Для более красивого вывода информации добавим в print наши переменные.: print(name, surname, age, ' год ', ' вес ', mas, '...)
#######################################################################################
# Даны два произвольные списка. Удалите из первого списка элементы присутствующие во втором списке.
#     Примечание. Списки создайте вручную, например так:
# my_list_1 = [2, 5, 8, 2, 12, 12, 4]
# my_list_2 = [2, 7, 12, 3]

# 1 способ - использование множеств set для локоничного решения
a = [1, 2, 3, 4] # у нас есть список 1
b = [2, 3]  # у нас есть список 2

result = set(a) - set(b) # попробуем использовать приведение к  классу сет
# задаем переменную и присваиваем ей значение операции вычитания классов set
print(list(result)) # для красивого вывода снова приведём результат к списку
#  посмотрим что получилось и действительно при этих данных всё работает?

# но если наша последовательность будет содержать повторяющиеся элементы
a = [1, 1, 2, 1, 3, 4]
b = [2, 3]
# если мы применим предыдущий метод, мы снова получим в результате [1,4]
# хотя должны получить [1,1,1,4]
# т.к. во множествах удаляются повторяющиеся элементы, приведя к множествам мы теряем единицы
# классический вариант решения - цикл for
# работаем со списками в которых есть дублирование данных.
for number in a: # записываем первый цикл for - для элемента из списка а
   if number in b: # если мы находим этот элемент в списке b
       a.remove(number) # мы удаляем этот элемент из списка а
print(a) # после прохода всех циклов и проверки условий выводим список а из которого исключили элементы b
# что будет если мы проходимся циклом по списку и при этом удаляем элемент из этого же списка?
# вводим иные данные и программа работает неккооректно:
a = [1, 1, 2, 1, 2, 2, 2, 3, 4, 2, 2, 6]
b = [2, 3]
for number in a:
   if number in b:
       a.remove(number)
print(a)
# программа ожет пропускать какие то элементы, если они стоят подряд
# Нужно быть внимательным, когда мы идём циклом по списку и удаляем элементы из этого списка
# Лучше будет организовать цикл по копии этого списка
# Правильный третий пример:
a = [1, 1, 2, 1, 2, 2, 2, 3, 4, 2, 2, 6]
b = [2, 3]

for number in a[:]: # достаточно просто делать срез от начала и до конца списка
# когда делаем таким образом мы будем работать не с самим списком, а создавать его копию

    if number in b:
        a.remove(number) # а удаляем число непосредственно из списка
print(a)
# срезы надо делать не всегда, а только когда делаем удаление из списка
#######################################################################################
# Дана дата в формате dd.mm.yyyy, например: 02.11.2013. Ваша задача — вывести дату в текстовом виде, например: второе ноября 2013 года. Склонением пренебречь (2000 года, 2010 года)
data = '02.11.2013'
# для начала нужно разбить дату на три части: месяц, год, день
d, m, y = data.split('.') # удобно сделать с помощью функции split
# объявляем переменные  d, m, y , берём нашу дату, используем функцию сплит и в качестве разделителя у нас будет точка
print(d, m, y)
# далее необходимо преобразовать строку в текстовый вид
# самый удобный способ для этого - использование словаря
months = {
    '01': 'Январь',
    '02': 'Февраль',
    '03': 'Март',
    '04': 'Апрель',
    '05': 'Май',
    '06': 'Июнь',
    '07': 'Июль',
    '08': 'Август',
    '09': 'Сентябрь',
    '10': 'Октябрь',
    '11': 'Ноябрь',
    '12': 'Декабрь',
}

days = {
    '01': 'Первое',
    '02': 'Второе',
    '03': 'Третье',
    '04': 'Четвёртое',
    '05': 'Пятое',
    '06': 'Шестое',
    '07': 'Седьмое',
    '08': 'Восьмое',
    '09': 'Девятое',
    '10': 'Десятое',
    '11': 'Олиннадцатое',
    '12': 'Двенадцатое',
    '13': 'Тринадцатое',
    '14': 'Четырнадцатое',
    '15': 'Пятнадцатое',
    '16': 'Шестнадцатое',
    '17': 'Семнадцатое',
    '18': 'Восемнадцатое',
    '19': 'Девятнадцатое',
    '20': 'Двадцатое',
    '21': 'Двадцать первое',
    '22': 'Двадцать второе',
    '23': 'Двадцать третье',
    '24': 'Двадцать четвёртое',
    '25': 'Двадцать пятое',
    '26': 'Двадцать шестое',
    '27': 'Двадцать седьмое',
    '28': 'Двадцать восьмое',
    '29': 'Двадцать девятое',
    '30': 'Тридцатое',
    '31': 'Тридцать первое',
}
# сформируем строку одним из самых удобных способов:
result = f'{days[d]} {months[m]} {y} года.' # Объявим переменную резалт, ставим букву f и будем создавать нашу строчку
# Вначале нам необходимо вывести день текстом. Мы берём словарь days, в качестве ключа мы будем передовать  переменную d
# т.е из 01 мы будем получать слово Первое
# аналогично делаем с месяцем. Берём словарь months, всё это помещаем в фигурные скобки, чтобы можно было встроить переменную в строку. Ключь уже будет переменная м
# после этого год мы выводим без изменений.
print(result)
#######################################################################################
# Дан список заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут только уникальные элементы исходного.
#     Примечание. Списки создайте вручную, например так:
# my_list_1 = [2, 2, 5, 12, 8, 2, 12]
#
# В этом случае ответ будет:
# [5, 8]

my_list3 = [3, 56 ,77 ,2 , 4, 3 ,77 ,108 , 56, 2, 3]
# воспользуемся способом определения количества вхождения элементов в список
result = [] # объявляем переменную, это будет результирующий список и он пока пустой
for number in my_list3: # переберать будем циклом for
    if my_list3.count(number) == 1: # это метод, который проверяет, сколько раз число входит в список
# если число входит в список 1 раз: count(number) == 1
        result.append(number) # то мы в результирующий список добавляем наше число number
print(result)
#######################################################################################
# В этой игре человек загадывает число, а компьютер пытается его угадать.
# В начале игры человек загадывает число от 1 до 100 в уме или записывает его на листок бумаги.
# Компьютер начинает его отгадывать предлагая игроку варианты чисел.
# Если компьютер угадал число, игрок выбирает “победа”.
# Если компьютер назвал число меньше загаданного, игрок должен выбрать “загаданное число больше”.
# Если компьютер назвал число больше, игрок должен выбрать “загаданное число меньше”.
# Игра продолжается до тех пор пока компьютер не отгадает число.
# Пример игры:
# Допустим, пользователь загадал число 42
# `15
#
# 35
#
# 96
# <
# 37
#
# 74
# <
# 52
# <
# 42
# =`
#
#     Примечание: Знаки “=”, “>” и “<” пользователь вводит с клавиатуры для общения с компьютером.
#     Вы можете использовать этот способ или придумать свой.

# шаг 1 - создание цикла для ввода данных
# в больших задачах мы не можем продумать все шаги сразу, поэтому
# двигаемся от более простых, к более сложным
#  Для начала можем создать цикл для ввода и выводаданных:
import random
while True: # сделаем его бесконечным, но в последствии сможем улучшить выход из цикла
    number = random.randint(1, 100) # программа пытается его угадать и например генерирует  случайное число от о до 100
    print(number) # выводим число которое сгенерировал компьютер.
    result = input('= > <') # подсказываем пользователю, что нужно выбрать, равно, больше или меньше
    if result == '=': # сначала начнём с наилучшего результата, если пользователь сказал, что число равно загаданному
        print('Победа!') # выводим победа
        break # выходим из бесконечного цикла. На этом программа заканчивается
    elif result == '>': # иначе, если. Если число больше, то выполняем это
        pass # ставим пока заглушку
    elif result == '<': # отрабатываем вариант, если число меньше
        pass  # ставим пока заглушку
#   У нас есть каркас программы который можем в дальнейшем расширять.

# шаг 2: нам необходимо придумать алгоритм угадывания числа.
# в принципе, если компьютер будет называть случайные числа и их не повторять,
# то рано или поздно он догадается, какое число мы загадали
# Но также мы ему даём подсказки - > и <. больше или меньше
# таким образом компьютер должен постоянно сужать диапазон и уже из него например брать случайное число.
# для этого создадим 2 переменные: min_number - которая будет хронить минимальное число. Это число 1 изначально
# и max_number - это максимальное число. 100 изначальное число

min_number = 1
max_number = 100

import random
while True:
    number = random.randint(min_number, max_number) # используем начальные значения для диапазона случайных чисел. от 1 до 100
# таким образом компьютер может теперь угадывать значение от одного значения до другого значения
    print(number)
# Запишем для себя и пользователя подсказку, что означают знаки >, < , =
    result = input('= (компьютер угадал число) > (загаданное число больше вашего). < (загаданное число меньше вашего)')
    if result == '=':
        print('Победа!')
        break

# если загаданное число больше вашего
    elif result == '>':
# значит нам надо заменить минимальное число на текущее число.
        min_number = number + 1 # заменяем на текущее и добавляем единицу
# единицу добавляем для того, чтобы тоже самое число уже не угадывать

# теперь рассмотрим действия, если число меньше.
    elif result == '<':
        max_number = number - 1

# Шаг 3. После того как мы проверили, что всё работает как надо, мы можем попобывать улучшить нашу программу и цикл.
# уберём бесконечный цикл while True
# у нас есть условие победы, когда result = "="
# поэтому мы можем написать условие цикла
# цикл будет выполняться пока результат не равен = : while result != '=':
# чтобы мы вошли в цикл, надо объявить переменную result выше и присоить ей например None
# Мы пока не знаем чему у нас равняется результат
# Тогда победителя мы будем объявлять, когда вышли из цикла while
# Удаляем первый if? он нам больше не нужен, а elif превращается в if

min_number = 1
max_number = 100
result = None

import random
while result != '=':
    number = random.randint(min_number, max_number)
    print(number)
    result = input('= (компьютер угадал число) > (загаданное число больше вашего). < (загаданное число меньше вашего)')

    if result == '>':
        min_number = number + 1
    elif result == '<':
        max_number = number - 1
print('Победа!!!')

# программа уменьшилась, но всё ещё работает верно.
#######################################################################################
# 1: Создайте функцию, принимающую на вход имя, возраст и город проживания человека.
# Функция должна возвращать строку вида «Василий, 21 год(а), проживает в городе Москва»
def anketa():
    name = input('Введите имя')
    age = int(input('Введите возраст'))
    town = input('Введите город проживания')
    print(name, age, 'год (а), проживает в городе ', town )

anketa()
#######################################################################################
def person_info(name, age, city):
    result = f'{name}, {age}, год(а) проживает в городе {city}'
    return result
print(person_info('Василий', 21, 'Москва'))
# мы должны вспомнить об основных атрибутах функции
# это её параметры (name, age, city), название person_info
# и возвращаемое значение return result.
#
# Объявляем функцию def person_info, у неё три параметра (name, age, city)
# создаём переменную result, она будет строкой и формируем строку удобным нам образом
# f'{name}, {age}, год(а) проживает в городе {city}'
# подставляем в строку параметры функции
# после того как готов результат,делаем ретёрн и  будем его возвращать
# после того как функция написана мы её вызываем и передаём параметры .начинаем пользоваться
# print(person_info('Василий', 21, 'Москва'))
#######################################################################################
# Создайте функцию, принимающую на вход 3 числа и возвращающую наибольшее из них.
def max_from_3(first, second, third):
    numbers = [first, second, third]
    print(max(numbers))

max_from_3(90, 4, 28)
#######################################################################################
def get_max(a, b, c):
    result = max([a, b, c])
    return result
result = get_max(4, 7, 12)
print(result)
# Объявляем функцию def get_max
# у неё три параметра (a, b, c) три числа
# result = max([a, b, c]) - сформируем список из этих чисел
# и далее применим к нему функцию max
# не забываем делать return - возвращать результат работы функции
# теперь можно функцию использовать, например объявляем переменную result =
# вызываем функцию result = get_max()
# подставляем переменные: result = get_max(4, 7, 12)
# print(result) проверяем как работает, выводим результат
#######################################################################################
# Давайте опишем пару сущностей player и enemy через словарь, который будет иметь ключи и значения:
# name - строка полученная от пользователя,
# health = 100,
# damage = 50. ### Поэкспериментируйте с значениями урона и жизней по желанию.
# ### Теперь надо создать функцию attack(person1, person2). 
# Примечание: имена аргументов можете указать свои.
# ### Функция в качестве аргумента будет принимать атакующего и атакуемого.
# ### В теле функция должна получить параметр damage атакующего и отнять это количество 
#от health атакуемого.
# Функция должна сама работать со словарями и изменять их значения.
playername = input('Введите имя игрока: ')
player = {'name': playername, 'health': 100, 'damage': 75}
enemy = {'health': 74, 'damage': 34}


def attack(person1, person2):
    person1 = player
    person2 = enemy
    fight = person2['health'] - person1['damage']
    if fight > 0:
        person2['health'] = fight
        print(person2)
    else:
        print('Враг Повержен!')


attack(player, enemy)
#######################################################################################
player_name = input('Введите имя игрока: ')
player = {
    'name': player_name,
    'health': 100,
    'damage': 50
}

enemy_name = ('Введите имя врага: ')
enemy = {
    'name': enemy_name,
    'health': 50,
    'damage': 30
}

def attack(unit, target):
    target['health'] -= unit['damage']

attack(player, enemy)
print(player, enemy)

attack(enemy, player)
print(player, enemy)
# Создадим 2 словаря для описания сущностей.
# Словари содержат ключи: имя, здоровье, урон
# имя вводит пользователь
# def attack - создаём функцию, придумываем названия параметров:
# первый параметр - unit - кто атакует
# второй параметр - target - цель , кого атакуют
# т.к. имеем дело со словарями, будем их менять.
# берём словарь и ключ target['health'] и из этого здоровья вычитаем значение другого ключа
# target['health'] -= unit['damage']
# проверяем как работает
# attack(player, enemy) и attack(enemy, player)
# вызываем функцию с разными параметрами
#######################################################################################
# Давайте усложним предыдущее задание. Измените сущности, 
# добавив новый параметр - armor = 1.2 (величина брони персонажа)
# Теперь надо добавить новую функцию, 
# которая будет вычислять и возвращать полученный урон по формуле damage / armor
# Следовательно, у вас должно быть 2 функции:
# Наносит урон. Это улучшенная версия функции из задачи 3.
# Вычисляет урон по отношению к броне.
#
# Примечание. Функция номер 2 используется внутри функции 
# номер 1 для вычисления урона и вычитания его из здоровья персонажа.
player['armor'] = 1.2
enemy['armor'] = 1.5

def arm_atack(person1, person2):
    person1 = player
    person2 = enemy
    uron = person1['damage']/person1['armor']
#######################################################################################
player_name = input('Введите имя игрока: ')
player = {
    'name': player_name,
    'health': 100,
    'damage': 50,
    'armor': 1.2
}

enemy_name = ('Введите имя врага: ')
enemy = {
    'name': enemy_name,
    'health': 50,
    'damage': 30,
    'armor': 1.5
}
def get_demage(damage, armor):
    return damage/armor
def attack(unit, target):
    damage = get_demage(unit['damage'], target['armor'])
    target['health'] -= damage

attack(player, enemy)
print(player, enemy)

attack(enemy, player)
print(player, enemy)

# сначала добавим в словари новые значения  'armor': 1.2
# напишем ещё одну функцию get_demage. в неё передаём 2 параметра
# damage - урон и armor - величина брони
# эта функция будет возвращать результат return damage/armor
# теперь мы можем ф-ю get_demage использовать в функции attack
# для того чтобы расчитать величину урона
# damage = get_demage(unit['damage'], target['armor'])
# теперь  damage = get_demage
# в параметры нам надо передать сначала урон. Урон наносит unit
# берём unit['damage']
# второй параметр - это броня
# броню мы берём у target
# target['armor']
# после того как вычислили урон, отнимаем его от здоровья
# target['health'] -= damage
#######################################################################################
import os, sys, random
os.mkdir('project_directory')
# создал папку project_directory в которой расположу пример состоящий из нескольких модулей
#######################################################################################
# Создайте модуль (модуль - программа на Python, т.е. файл с расширением .py).
# В нем создайте функцию создающую директории от dir_1 до dir_9 
# в папке из которой запущен данный код.
# Затем создайте вторую функцию удаляющую эти папки.
# Проверьте работу функций в этом же модуле.

# в созданной папке буду создавать модуль
# лп --> project_directory --> пкм --> new --> python file
# т.к модуль будет работать с папками назовём его folder.py
# В этом файле начнём писать новую функцию
# Дадим ей название, параметры оставим пустыми т.к предлагается создать фиксированное кол-во папок
def create_folders():
    for i in range(1, 10):
# нам нужно создать 9 папок, воспользуемся функцией range
# и циклом for будем идти от 1 до 10 range(1, 10) не включительно
# после этого формируем имя нашей паки
        folder_name = f'dir_{i}'
# переменная, присваиваем значение
# сначала у нас идёт  f'dir_ , затем подчёркивание
# после этого мы подставляем переменную i f'dir_{i}'
# после того как есть имя папки
# импортируем модуль ос и пользуемся функцией
#        os.mkdir(folder_name)
# вызаем функуию, чтобы это проверить
# create_folders()
# ! Функция для создания папок:
def delete_folders():
    for i in range(1, 10):
        folder_name = f'dir_{i}'
        os.mkdir(folder_name)
# открываем структуру проекта (ЛП) видим созданные папки
# теперь пишем функцию которая будет удалять папки
# def delete_folders():
# У неё также не будет параметров, мы будем удалять теже папки,
# которые создали
# удалять с помощью функции os.rmdir('имя папки')
# Функция для удаления папок:
def delete_folders():
    for i in range(1, 10):
        folder_name = f'dir_{i}'
        os.rmdir(folder_name)
# ИТОГО СОДЕРЖАНИЕ МОДУЛЯ 1 - folder.py
import os

def create_folders():
    for i in range(1, 10):
        folder_name = f'dir_{i}'
        os.mkdir(folder_name)

def delete_folders():
    for i in range(1, 10):
        folder_name = f'dir_{i}'
        os.rmdir(folder_name)

if __name__ == '__main__':
    create_folders()
    delete_folders()
#######################################################################################
# Создайте модуль. В нем создайте функцию, которая принимает список
# и возвращает из него случайный элемент.
# Если список пустой функция должна вернуть None.
# Проверьте работу функций в этом же модуле.
# Примечание: Список для проверки введите вручную.
# Или возьмите этот: [1, 2, 3, 4]

# создаём новый модуль
#  лп --> homework5example --> пкм --> new --> python file
# назовём его randomlist.py
# в навигации лп появился новый файл - модуль
# в нём мы будем создавать функцию get_random
# эта функция должна на вход принимать список
# поэтому создаём параметр input_list
# def get_random(input_list):
# Если список не пустой тогда мы должны из него
# получить случайный элемент
if input_list:
    result = random.choice(input_list)
# Это можно сделать подключив модуль рандом
# метод choice
# в него передаём наш input_list
# random.choice(input_list)
# далее нам нужно проверить если список пустой и вернуть значение None
else:
     return None
# Но в пайтоне если мы ничего не возвращаем
# то тоже будет возвращаться None
# else:
#      return None
# будет лишнем
#
# ИТОГО: функция для 2 ого задания
import random

def get_random(input_list):
    if input_list:
        result = random.choice(input_list)
        return result

if __name__ == '__main__':
    get_random([1, 2, 3, 4, 5])
# проверяем как отработала, вызываем функцию
# print(get_random([1, 2, 3, 4, 5]))
#######################################################################################
# Создайте модуль main.py.
# Из модулей реализованных в заданиях 1 и 2
# сделайте импорт в main.py всех функций.
# Вызовите каждую функцию в main.py и проверьте
# что все работает как надо.
# Примечание: Попробуйте импортировать как весь
# модуль целиком (например из задачи 1),
# так и отдельные функции из модуля.

import randomlist
from folder import create_folders, delete_folders
create_folders()
delete_folders()
print(randomlist.get_random([1, 3, 5, 7, 9]))
print(randomlist.get_random([]))

#  создаём новый модуль mainHW5.py
#  лп --> homework5example --> пкм --> new --> python file
# Этот модуль пустой, но есть 2 других созданных ранее и 3 функции
# этих 2 ух модулях
# мы сделаем импорты в nainHW5.py
# import randomlist
# это мы импортировали модуль целиком
# второй вариант импорта: импорт функции из модуля
# from folder import create_folders, delete_folders
# соответственно функции create_folders, delete_folders вызываются:
# create_folders()
# delete_folders()
# а для вызова randomlist
# print(randomlist.get_random([1, 3, 5, 7, 9]))
# и сделаем тоже самое для пустого списка
# print(randomlist.get_random([1]))
#
# Итого mainHW5.py выглядит:
#
# import randomlist
# from folder import create_folders, delete_folders
# create_folders()
# delete_folders()
# print(randomlist.get_random([1, 3, 5, 7, 9]))
# print(randomlist.get_random([1]))
#
# Если внутри кода в модуле есть вызов функции, то при вызове из модуля mainHW5.py
# функция отработает внутри функции и при вызове
# чтобы этого не было добавляем в модуле выражение
#######################################################################################
# Создайте модуль (модуль - программа на Python, т.е. файл с расширением .py).
# В нем создайте функцию создающую директории от dir_1 до dir_9 в папке из которой запущен данный код.
# Затем создайте вторую функцию удаляющую эти папки.
# Проверьте работу функций в этом же модуле.
import os, sys

def directory_maker():
    print('начало работы функции')
    print(os.getcwd())
    print('Это текущая директория из которой запускается modul1. В которой он и расположен')
    os.mkdir('dir_1')
    os.mkdir('dir_2')
    os.mkdir('dir_3')
    os.mkdir('dir_4')
    os.mkdir('dir_5')
    os.mkdir('dir_6')
    os.mkdir('dir_7')
    os.mkdir('dir_8')
    os.mkdir('dir_9')

def directory_del():
    os.rmdir('dir_1')
    os.rmdir('dir_2')
    os.rmdir('dir_3')
    os.rmdir('dir_4')
    os.rmdir('dir_5')
    os.rmdir('dir_6')
    os.rmdir('dir_7')
    os.rmdir('dir_8')
    os.rmdir('dir_9')
#######################################################################################
while command != 'выйти':
    command = input('Введите действие ')
    if command == 'создать':
        dirx = input('Какое количество папок создать? ')
        import creatdir
        creatdir.creatdir(dirx)
    if command == 'удалить':
        print('Удаляю раннее созданные папки')
        import remdir
        remdir.remdir(dirx)
    if command == 'список':
        i = input('Введите ряд чисел через запятую ')
        i = i.split(',')
        import randomnum
        r = randomnum.randomnum(list(i))
        print(r)
#######################################################################################
# creatdir.py
import os
def creatdir(dirx):
    for i in range(1,int(dirx) + 1):
        dirn = 'dir_' + str(i)
        os.mkdir(dirn)
#######################################################################################
import os

def new_p():
    for i in range(1,10):
        new_path = os.path.join(os.getcwd(), 'dir_{}' .format(i))
        os.mkdir(new_path)
#######################################################################################
# создать модуль music_serialize.py.
# В этом модуле определить словарь для вашей любимой группы, например:
# my_favourite_group = {'name': 'Aqua.'tracks':['Roses are Red','Barbie Girl'],
# 'albums':[{'name':'Aquarium','year':1997},{'name':'Aquarius','year':2000}]}
# C помощью модулей json и pickle сериализовать данный словарь в json и в байты,
# вывести результаты в терминал записать результаты в файлы
# group.json, group.pickle соответственно. В файле group.json указать кодировку utf-8

import json
# импортируем следющий модуль
import pickle

# создаём словарь
my_favourite_group = {'name': 'Aqua.', 'tracks':['Roses are Red','Barbie Girl'],
                      'albums':[{'name':'Aquarium','year':1997},{'name':'Aquarius','year':2000}]}
# в словаре храним информацию о группе : её название - 'name': 'Aqua.' ,
# песни которые написала группа : 'tracks':['Roses are Red','Barbie Girl']
# и альбомы 'albums':[{'name':'Aquarium','year':1997},{'name':'Aquarius','year':2000}]}
# в альбоме также присутствует год выпуска и название 'year':1997. 'name':'Aquarium'
print(my_favourite_group)
print(type(my_favourite_group)) # <class 'dict'>

# нам нужне сериализовать этот словарь, вывести результаты на экран, и в файлы.
# Будем это делать с помощью модулей json и pickle . сделаем его импорт : import json
# начинаем работу с модулем json:
j_group = json.dumps(my_favourite_group)
# сначала выведем результаты на экран. Дадим имя j_group ,
# чтобы обозначить переменную для нашей группы,
# которая у нас будет в формате json. И вызываем функцию json.dumps
# для того чтобы сразу привести словарик к формату json
# параметром передаём (my_favourite_group)

# выведим результат на экран
print(j_group)
print(type(j_group)) # <class 'str'>
# Хотя вывод практически не изменился, но поменялся тип данных .

# проделаем похожую вещь с помощью модуля pickle
p_group = pickle.dumps(my_favourite_group)
print(p_group)
print(type(p_group)) # <class 'bytes'>
# методы называются динаково как в модуле json так и в модуле pickle
# После метода .dump в модуле pickle мы видим набор байт

# теперь сохраним данные в файл.
# для этого достаточно воспользоваться другими функциями модулей json pickle
# для начала откроем файл.
# будем пользоваться менеджером контекста with

with open('group.json', 'w', encoding='utf-8') as jsonfile:
    json.dump(my_favourite_group, jsonfile)
# файл json мы открываем на запись  'w' и указываем кодировку encoding='utf-8'
# далее после того, как файл открыт используем модуль json
# json.dump(my_favourite_group, jsonfile)
# первый параметр это наш словарь - my_favourite_group,
# второй параметр - jsonfile -  имя файла.

# запускаем файл и в папке homework6_wc
# где наш music_serialize.py
# появляется файл group.json
# Если его открыть через пайчарм
# мы увидим нашу группу сохранёную в json формате

# сделаем похожее действие для модуля pickle:
with open('group.pickle', 'wb') as picklefile:
    pickle.dump(my_favourite_group, picklefile)
# открываем файл 'group.pickle'
# открываем файл на запись байт 'wb',
# поэтому кодировку указывать не нужно
# мы создаём второй файл и запишем туда набор байт
# Мы сделали вывод в терминал и запись информации в файл 
#######################################################################################
# Создать модуль music_deserialize.py
# В этом модуле открыть файлы group.json и group.pickle
# прочитать из них информацию
# Получить объект словарь из предыдущего задания

# Создать модуль music_deserialize.py
# В этом модуле открыть файлы group.json и group.pickle
# прочитать из них информацию
# Получить объект словарь из предыдущего задания

# мы используем 2 файла, чтобы смодулировать ситуацию,
# когда например один разработчик записывает данные в файл
# и передаёт другому разработчикутакже данные
# можно например вместо вывода в терминал передовать по сети.
# Импортируем модули json и pickle
import json
import pickle
# далее открываем файл
with open('group.json', 'r', encoding='utf-8') as jsonfile:
    result = json.load(jsonfile)
# открываем файл 'group.json'
# на чтение 'r'
# указываем кодироку encoding='utf-8'
# ту же самую кодировку в которой мы записывали файл
# после того как файл открыт ,
# создаём переменную в которую мы будем читать результат
# result =  используем метод json и метод load
# и передаём в него параметр jsonfile название файла

# после того как мы получили результат проверим,
# что у нас он совпадает с тем, что был изначально
print(result) # <class 'dict'>
print(type(result))

# теперь используем
# модуль pickle похоже на метод json
# но мы работаем с байтами
with open('group.pickle', 'rb') as picklefile:
    result = pickle.load(picklefile)
print(result) # <class 'dict'>
print(type(result))
# открываем файл 'group.pickle'
# на чтение байт 'rb'
# Объявляем переменную result
# и используем метод .load
#######################################################################################
import pickle, json

my_favorite_crypto = {
    'name': 'GPB',
    'paers': ['GPB/USDT', 'GPB/XRP'],
    'prices': [{'date_pick':'Black_Monday','year':2021},
    {'date_pick':'сранькакаята','year':2345}]
}
# открываем файл на запись байт 'wb'
# метод picle
with open('favorit.picle', 'w') as f:
    pickle.dump(my_favorite_crypto, f)

with open('favorit.json', 'wb', encoding='utf-8'):
   jscrypto =  json.dumps(my_favorite_crypto)
#######################################################################################
# Практическое задание
# Решить с помощью генераторов списка.

# 1: Даны два списка фруктов.
# Получить список фруктов,
# присутствующих в обоих исходных списках.
#     Примечание: Списки фруктов создайте вручную в начале файла.

fruits1 = ['яблоки','груши','папайя','маракуя','драгонфрукт','кокос','банан',]
fruits2 = ['мандарин','груши','вишня','маракуя','драгонфрукт','фейхуа','банан',]
# классический способ с помощью for
result = []
# создаём переменную для результата
for fruit in fruits1:
# перебираем первый список. для элемента из списка 1
    if fruit in fruits2:
# если элемент есть в списке 2, добавляем его в результат
        result.append(fruit)
print(result)

# решение с помощью генератора
result = [fruit for fruit in fruits1 if fruit in fruits2]
# записываем фрукт - fruit,
# который у нас идёт в цикле for fruit in fruits1
# а далее пишем условие:
# если этот элемент есть во втором списке
# if fruit in fruits2
print(result)
#######################################################################################
# Дан список, заполненный произвольными числами.
# Получить список из элементов исходного, удовлетворяющих следующим условиям:
# Элемент кратен 3,
# Элемент положительный,
# Элемент не кратен 4.
# Примечание: Список с целыми числами создайте вручную в начале файла.
# Не забудьте включить туда отрицательные числа. 10-20 чисел в списке вполне достаточно.

numbers = [1, 2, 3, -4, 5, 6, -7, -8, 9, 10, -11, 12, -13, 14, 15, -16, 17, -18, 19, 20, 21, -22]
# создаём генератор списка, записывать мы будем число number
result = [number for number in numbers if number > 0 and number %3 ==0 and number %4 != 0]
# в цикле for перебираем наш список for number in numbers
# далее записываем условие:
# первое условие элемент положительный number > 0
# второе условие элемент кратен 3^ number %3 ==0
# третье условие элемент не кратен 4: number %4 != 0
print(result)
#######################################################################################
# Напишите функцию которая принимает на вход список.
# Функция создает из этого списка новый список из квадратных корней чисел
# (если число положительное) и самих чисел (если число отрицательное)
# и возвращает результат (желательно применить генератор и тернарный оператор при необходимости).
# В результате работы функции исходный список не должен измениться.
# Например:
# old_list = [1, -3, 4]
# result = [1, -3, 2]
# Примечание: Список с целыми числами создайте вручную в начале файла.
# Не забудьте включить туда отрицательные числа. 10-20 чисел в списке вполне достаточно.

import math
# для начала рассмотрим ситуацию, когда входной список может измениться
old_list = [1, 2, 3, -4, 5, 6, -7, -8, 9, 10, -11, 12, -13, 14, 15, -16, 17, -18, 19, 20, 21, -22]
# создаём функцию. в неё попадает входной список input_list
def new_sqrt_list(input_list):
    for i in range(len(input_list)):
# перебираем список по индексам
        number = input_list[i]
# получаем число. Если число больше 0
        if number > 0:
# по индексу записываем корень из этого числа
            input_list[i] = math.sqrt(number)

        else:
            del input_list[i]
    return input_list
# и возвращаем результат
result = new_sqrt_list(old_list)
# вызываем функцию, передаём old_list
print(result)
# печатаем результат
print(old_list)
# печатаем old_list
# запускаем и видим результат равняется old_list
# и old_list изменился

# Помним, чтобы список не менялся, нам нужно работать с его копией
old_list = [1, 2, 3, -4, 5, 6, -7, -8, 9, 10, -11, 12, -13, 14, 15, -16, 17, -18, 19, 20, 21, -22]

def new_sqrt_list(input_list):
# Создаём копию списка
    input_list = input_list.copy()
    for i in range(len(input_list)):
        number = input_list[i]
        if number > 0:
            input_list[i] = math.sqrt(number)

        else:
            del input_list[i]
# если захотим удалить элемент,
# мы этого сделать не сможем.
# т.к циклом идём по немуже
    return input_list
result = new_sqrt_list(old_list)
print(result)
print(old_list)
# пример надуман и плох, т.к имеем дело с индексами
# рассмотрим более удобный способ. воспользуемся генератором
old_list = [1, 2, 3, -4, 5, 6, -7, -8, 9, 10, -11, 12, -13, 14, 15, -16, 17, -18, 19, 20, 21, -22]
def new_sqrt_list(input_list):
# создаём переменную которая будет равняться генератору списка
    result = [math.sqrt(number) for number in input_list if number > 0]
# будем записывать в список math.sqrt(number)
# числа будем брать из списка: for number in input_list
# нам необходимо проверять число больше 0: if number > 0
    return result
result = new_sqrt_list(old_list)
print(result)
print(old_list)
# в этом примере видно, что в этом списке нет отрицательных чисел...
# как изменить генератор, чтобы эти числа остались?
# с помощью комбинации генератора и тернального оператора
def new_sqrt_list(input_list):
    result = [math.sqrt(number) if number > 0 else number for number in input_list ]
    return result
result = new_sqrt_list(old_list)
print(result)
print(old_list)
# мы будем брать корень из числа:  math.sqrt(number)
# если у нас число больше 0: if number > 0
# а иначе записываем в список само число: else number
# комбинации тернарного оператора и генератора
# дают нам новые возможности
#######################################################################################
# Написать функцию которая принимает на вход число от 1 до 100.
# Если число равно 13, функция поднимает исключительную ситуации ValueError
# иначе возвращает введенное число, возведенное в квадрат.
# Далее написать скрипт.
# Пользователь вводит число.
# Введенное число передаем параметром в написанную функцию и печатаем результат,
# который вернула функция. Обработать возможность возникновения исключительной ситуации,
# которая поднимается внутри функции

def unlucky_number(number):
    if number == 13:
        raise ValueError('Вы ввели запретное число!')
# исключение с помощью команды raise ValueError (ошибочное значение)
# в скобках можно написать пояснение ('Вы ввели запретное число!')
    else:
# если число не ровно 13 , то мы возвращаем сисло в квадрате
        return number ** 2

number = int(input('введите число от 1 до 100: '))
# мы вызываем функцию и записываем результат в переменную result
try:
    result = unlucky_number(number)
# Но в этой строке у нас возможна исключительная ситуация,
# поэтому всё мы помещаем в блок try - except и возможно else
except ValueError:
    print('!введено запретное число!')
# если у нас возникает ошибка ValueError:
# мы будем её обрабатывать.
# например просто пишем :
# print('!введено запретное число!')
else:
# ecли всё хорошо выполняем этот код
# - печатаем результат
    print(result)
# функция сгенерировала исключительную ситуацию,
# а мы эту ситуацию обработали
# Если убрать try - except
# то ошибка будет сгенерирована
# и программа у нас остановитя.
#######################################################################################
# Написать функцию которая принимает на вход число от 1 до 100.
# Если число равно 13, функция поднимает исключительную ситуации ValueError
# иначе возвращает введенное число, возведенное в квадрат.
# Далее написать основной код программы. Пользователь вводит число.
# Введенное число передаем параметром в написанную функцию и печатаем результат,
# который вернула функция. Обработать возможность возникновения исключительной ситуации,
# которая поднимается внутри функции
def sqrt(number):
    if number == 13:
        raise Exception(ValueError)
    else:
        return number ** 2

number = int(input('Введите число от 1 до 100: '))
try:
   0 > number > 100
except ValueError:
    print('Нужно было ввести число от 1 до 100')
print(sqrt(number))
#######################################################################################
# Напишите функцию которая принимает на вход список.
# Функция создает из этого списка новый список из квадратных корней чисел
# (если число положительное) и самих чисел (если число отрицательное)
# и возвращает результат (желательно применить генератор и тернарный оператор при необходимости).
# В результате работы функции исходный список не должен измениться.
# Например:
# old_list = [1, -3, 4]
# result = [1, -3, 2]
# Примечание: Список с целыми числами создайте вручную в начале файла.
# Не забудьте включить туда отрицательные числа. 10-20 чисел в списке вполне достаточно.
import math
numbers = [1, 2, 3, 4, 5, 6, 7, -8, -9, -10, 11, -12, 14, 15, 13, 16, 18, 23, 76, -895, 908, 1024, 333]
copynumbers = numbers.copy()
def sqrt_list(copynumbers):
    result = []
    for i in copynumbers:
        if i < 0:
            result.append(i)
        else:
            el = math.sqrt(i)
            result.append(el)
    return result

print(numbers)
print(sqrt_list(copynumbers))
#######################################################################################
# Дан список, заполненный произвольными числами.
# Получить список из элементов исходного, удовлетворяющих следующим условиям:
# Элемент кратен 3,
# Элемент положительный,
# Элемент не кратен 4.
# Примечание: Список с целыми числами создайте вручную в начале файла.
# Не забудьте включить туда отрицательные числа. 10-20 чисел в списке вполне достаточно.

numbers = [1, 3, 5, 6, 7, -8, -9, -10, 11, -12, 13, 18, 23, 76, -895, 908, 1024, 333]
new_numbers = [i for i in numbers if i % 3 == 0 and i > 0 and i % 4 != 0]
print(new_numbers)
#######################################################################################
# Даны два списка фруктов.
# Получить список фруктов,
# присутствующих в обоих исходных списках.
#     Примечание: Списки фруктов создайте вручную в начале файла.

fructs1 = ['арбуз', 'дыня', 'апельсин', 'мандарин', 'климентин', 'лимон',]
fructs2 = ['лимон', 'мандарин', 'апельсин', 'яблоко', 'груша', 'черешня',]
fruct_basket = [i for i in fructs1 if i in fructs2]
print(fruct_basket)
#######################################################################################
# ЗАДАЧА  Multiply (Intro)
# Итак, это самая простая миссия. Напишите функцию, которая будет получать
# 2 числа и возвращать результат произведения этих чисел.
# Входные данные: Два аргумента. Оба int
# Выходные данные: Int.
# Пример:
# mult_two(2, 3) == 6
# mult_two(1, 0) == 0

def mult_two(a: int, b:int) -> int:
    return a*b
#######################################################################################
# ЗАДАЧА. First Word (simplified)
# Дана строка и нужно найти ее первое слово.
# Это упрощенная версия миссии First Word, которую можно решить позднее.
# Строка состоит только из английских символов и пробелов.
# В начале и в конце строки пробелов нет.
# Входные данные: строка.
# Выходные данные: строка.
# Пример:
# first_word("Hello world") == "Hello"
# Как это используется: Первое слово — это команда в командной строке.
# Предусловия: Текст может содержать буквы a-z, A-Z и пробелы.

def first_word(text: str) -> str:
    return text.split()[0]
#######################################################################################
# ЗАДАЧА. Acceptable Password I
# Вы начали серию задач связаную с паролями. Каждая следующая задача связана с предыдущей.
# Каждая следующая задача будет сложнее предыдущей.
# В этой задаче, Вам нужно создать функцию проверки пароля.
# Условия проверки:
# длина пароля должна быть больше 6.
# Входные данные: Строка.
# Выходные данные: Логический тип.
# Пример:
# is_acceptable_password('short') == False
# is_acceptable_password('muchlonger') == True
# Для чего это нужно: Для проверки заполнения пароля. Кроме того, полезно будет научиться оценивать задачи.

def is_acceptable_password(password: str) -> bool:
    if len(password) > 6:
        return True
    else:
        return False
#######################################################################################
# Решение через lambda
is_acceptable_password_lambda = lambda password: len(password) > 6
#######################################################################################
# ЗАДАЧА. Number Length
# Вам дано положительное целое число. Определите сколько цифр оно имеет.
# Входные данные: Положительное целое число
# Выходные данные: Целое число.
# Пример:
# number_length(10) == 2
# number_length(0) == 1

def number_length(a: int) -> int:
    result = len(str(a))
    return result
#######################################################################################
# ЗАДАЧА 5. End Zeros
# Попробуйте выяснить какое количество нулей содержит данное число в конце.
# Входные данные: Положительное целое число (int).
# Выходные данные: Целое число (int).
# Пример:
# end_zeros(0) == 1
# end_zeros(1) == 0
# end_zeros(10) == 1
# end_zeros(101) == 0

def end_zeros(num: int) -> int:
    num_str=str(num)
    num_str=num_str[::-1]
    count=0

    for i in num_str:
        if i=='0':
            count+=1
        else:
            break
    return count
#######################################################################################
def end_zeros(num: int) -> int:
    return len(s := str(num)) - len(s.rstrip('0'))
#######################################################################################
end_zeros = lambda num: len(str(num)) - len(str(num).rstrip('0'))
#######################################################################################
import re
def end_zeros(num: int) -> int:
    return len(re.search('0*$', str(num)).group())
#######################################################################################
def end_zeros(number):
    n = str(number)
    return len(n) - len(n.strip('0'))
#######################################################################################
def end_zeros(number):
    number = str(number)
    if number[-1:] != '0':
        return 0
    return 1 + end_zeros(number[:-1])
#######################################################################################
def end_zeros(number):
    if not number:
       return 1
    if not number % 10:
       return 1 + end_zeros(number // 10)
    return 0
#######################################################################################
def end_zeros(number):
    result = not number
    while number and not number % 10:
        number /= 10
        result += 1
    return result
#######################################################################################
def end_zeros(number):
    en = enumerate(str(number)[::-1])
    return not number or next(i for i, x in en if x != '0')
#######################################################################################
def end_zeros(number):
    from itertools import takewhile
    number = str(number)[::-1]
    return len(list(takewhile(lambda x: x == '0', number)))
#######################################################################################
# ЗАДАЧА 6. Backward String
# Верните данную строку в перевернутом виде.
# Входные данные: Строка.
# Выходные данные: Строка.
# Пример:
# backward_string('val') == 'lav'
# backward_string('') == ''
# backward_string('ohho') == 'ohho'
# backward_string('123456789') == '987654321'

def backward_string(val: str) -> str:
    string = "".join(reversed(val))
    return string
#######################################################################################
backward_string = lambda val: val[::-1]
#######################################################################################
def backward_string(val: str) -> str:
    return val[::-1]
#######################################################################################
# ЗАДАЧА. Remove All Before
# Не все элементы важны. Вам нужно удалить из список все элементы до указаного.
# На примере мы имеем список [1, 2, 3, 4, 5] где нужно было удалить все элементы до 3 - 1 и 2 соответственно.
# Есть два ньюанса: (1) если в списке нет элемента до которого нужно удалить остальные элементы, то список не должен измениться. (2) если list пустой, то он должен остаться пустым.
# Входные данные: Список и элемент до которого нужно удалить другие элементы.
# Выходные данные: Набор значений (кортеж, список, итератор ...).
# Пример:
# remove_all_before([1, 2, 3, 4, 5], 3) == [3, 4, 5]
# remove_all_before([1, 1, 2, 2, 3, 3], 2) == [2, 2, 3, 3]

from typing import Iterable
def remove_all_before(items: list, border: int) -> Iterable:
    return items[items.index(border):] if border in items else items
#######################################################################################
from typing import Iterable
def remove_all_before(items: list, border: int) -> Iterable:
    if border in items:
        del items[:items.index(border)]
    return items
#######################################################################################
def remove_all_before(items, border):
    try:
        return items[items.index(border):]
    except ValueError:
        return items
#######################################################################################
from typing import Iterable
def remove_all_before(items: list, border: int) -> Iterable:
    if list == [] or border not in items:
        return items
    else:
        x = items.index(border)
        return items[x:]
#######################################################################################
# ЗАДАЧА. All Upper I
# Проверить все ли символы в строке являются заглавными.
# Если строка пустая или в ней нет букв - функция должна вернуть True.
# Входные данные: Строка.
# Выходные данные: Логический тип.
# Пример:
# is_all_upper('ALL UPPER') == True
# is_all_upper('all lower') == False
# is_all_upper('mixed UPPER and lower') == False
# is_all_upper('') == True
# is_all_upper('444') == True
# is_all_upper('55 55 5') == True
# Условия: a-z, A-Z, 1-9 и пробелы

def is_all_upper(text: str) -> bool:
    return text == text.upper()
#######################################################################################
import re
def is_all_upper(text: str) -> bool:
    return len(re.sub(r'[a-z]', '', text))==len(text)
#######################################################################################
def is_all_upper(text: str) -> bool:
    text=text.replace(" ","")
    if text.isupper()==True:
        return True
    elif len(text)==0:
        return True
    elif text.isdigit()==True:
        return True
    elif text.isspace()==True:
        return True
    else:
        return False
#######################################################################################
def is_all_upper(text: str) -> bool:
    result = True
    if not text.strip() or text.isupper() or any(char.isdigit() for char in text):
        result = True
    elif text.islower() or (not text.islower() and not text.isupper()):
        result = False
    return result
#######################################################################################
# ЗАДАЧА. Replace First
# В данном списке первый элемент должен стать последним.
# Пустой список или список из одного элемента не должен измениться.
# Входные данные: Список.
# Выходные данные: Набор элементов.
# Пример:
# replace_first([1, 2, 3, 4]) == [2, 3, 4, 1]
# replace_first([1]) == [1]

from typing import Iterable
def replace_first(items: list) -> Iterable:
    if items == []:
        return items
    else:
        a = items[0]
        del items[0]
        items.append(a)
        return items
#######################################################################################
# Change items IN-PLACE.
def replace_first(items: list) -> list:
    if items:
        items.append(items.pop(0))
    return items
#######################################################################################
# Slices
def replace_first(items: list) -> list:
    return items[1:] + items[:1]
#######################################################################################
# collections.deque have an useful method: rotate.
from collections import deque
def replace_first(items: list) -> deque:
    items = deque(items)
    items.rotate(-1)
    return items
#######################################################################################
replace_first = lambda a: a[1:] + a[:1]
#######################################################################################
from typing import Iterable
def replace_first(items: list) -> Iterable:
    return items[1:] + items[:1]
#######################################################################################
from typing import Iterable
def replace_first(items: list) -> Iterable:
    if len(items) > 1:
        items.append(items.pop(0))
    return items
#######################################################################################
# ЗАДАЧА. Max Digit
# У вас есть число и нужно определить
# какая цифра из этого числа является наибольшей.
# Входные данные: Положительное целое число.
# Выходные данные: Целое число (0-9).
# Пример:
# max_digit(0) == 0
# max_digit(52) == 5
# max_digit(634) == 6
# max_digit(1) == 1
# max_digit(10000) == 1

def max_digit(number: int) -> int:
    return int(max(i for i in str(number)))
#######################################################################################
def max_digit(number):
    number = set(str(number))
    return int(max(number))
#######################################################################################
def max_digit(number: int) -> int:
    text = str(number)
    for n in range(9, -1, -1):
        if str(n) in text:
            return n
#######################################################################################
max_digit = lambda number: int(max(str(number)))
#######################################################################################
# ЗАДАЧА. Split Pairs
# Разделите строку на пары из двух символов.
# Если строка содержит нечетное количество символов,
# пропущенный второй символ последней пары должен быть заменен подчеркиванием ('_').
# Входные данные: Строка.
# Выходные данные: Массив строк.
# Пример:
# split_pairs('abcd') == ['ab', 'cd']
# split_pairs('abc') == ['ab', 'c_']
# Предварительное условие: 0<=len(str)<=100

def split_pairs(a):
    if len(a) == 0:
        a = a
    elif len(a) % 2 == 0:
        a = a
    else:
        a = a + '_'
    n = 2
    chunks = [a[i:i+n] for i in range(0, len(a), n)]
    return chunks
#######################################################################################
def split_pairs(a):
    return [ch1+ch2 for ch1,ch2 in zip(a[::2],a[1::2]+'_')]
#######################################################################################
from textwrap import wrap
def split_pairs(a):
    a = a + '_' if len(a) % 2 else a
    return wrap(a, 2)
#######################################################################################
import itertools, operator
def split_pairs(a):
    it = itertools.chain(a, '_')
    return map(operator.add, it, it)
#######################################################################################
def split_pairs(s):
    N = len(s)
    if N % 2 == 1: s += "_"
    return [s[i:i+2] for i in range(0,N,2)]
#######################################################################################
# ЗАДАЧА. Beginning Zeros
# Вам дана строка состоящая только из цифр.
# Вам нужно посчитать сколько нулей ("0")
# находится в начале строки.
# Входные данные: Строка, состоящая только из цифр.
# Выходные данные: Целое число.
# Пример:
# beginning_zeros('100') == 0
# beginning_zeros('001') == 2
# beginning_zeros('100100') == 0
# beginning_zeros('001001') == 2
# beginning_zeros('012345679') == 1
# beginning_zeros('0000') == 4
# Строка может иметь цифры: 0-9

def beginning_zeros(number: str) -> int:
    result = 0
    for n in number:
        if int(n) == 0:
            result += 1
        else:
            return result
    return result
#######################################################################################
beginning_zeros = lambda number: len(number) - len(number.lstrip('0'))
#######################################################################################
from itertools import takewhile
beginning_zeros = lambda number: len(list(takewhile(lambda x: x=='0', number)))
#######################################################################################
def beginning_zeros(number: str) -> int:
    return (len(number)-len(number.lstrip("0")))
#######################################################################################
def beginning_zeros(number: str) -> int:
    zero = 0
    for num in number:
        if num != '0':
            break
        else:
            zero += 1
    return zero
#######################################################################################
import re
def beginning_zeros(number: str) -> int:
    return len(re.sub(r'[^0].*$', '', number))
#######################################################################################
# ЗАДАЧА. Nearest Value
# Найдите ближайшее значение к переданному.
# Вам даны список значений в виде множества (Set) и значение,
# относительно которого, надо найти ближайшее.
# Например, мы имеем следующий ряд чисел: 4, 7, 10, 11, 12, 17.
# И нам нужно найти ближайшее значение к цифре 9.
# Если отсортировать этот ряд по возрастанию,
# то слева от 9 будет 7, а справа 10.
# Но 10 - находится ближе, чем 7,
# значит правильный ответ 10.
# Несколько уточнений:
# Если 2 числа находятся на одинаковом расстоянии - необходимо выбрать наименьшее из них;
# Ряд чисел всегда не пустой, т.е. размер >= 1;
# Переданное значение может быть в этом ряде, а значит оно и является ответом;
# В ряде могут быть как положительные, так и отрицательные числа, но они всегда целые;
# Ряд не отсортирован и состоит из уникальных чисел.
# Входные данные: Два аргумента. Ряд значений в виде set. Искомое значение - int
# Выходные данные: Int.
# Пример:
# nearest_value({4, 7, 10, 11, 12, 17}, 9) == 10
# nearest_value({4, 7, 10, 11, 12, 17}, 8) == 7

def nearest_value(values, one):
    return min({(abs(n-one), n) for n in values})[1]
#######################################################################################
def nearest_value(values: set, one: int) -> int:
    return sorted(sorted(values), key=lambda x: abs(one - x))[0]
########################################################################################-----------------------------------------------------------
def nearest_value(values: set, one: int) -> int:
    lista = sorted(values)
    for element in lista:
        diff = abs(one - element)
        try:
            if diff < prevDiff:
                prevDiff = diff
                nearest = element
        except UnboundLocalError:
            prevDiff = diff
            nearest = element
    return nearest
#######################################################################################
def nearest_value(values: set, one: int) -> int:
    l = list(values);
    l.sort(key=lambda x:(abs(x - one),x));
    return l[0];
#######################################################################################
def nearest_value(values: set, one: int) -> int:
    values = list(values)
    if one in values:
        return one
    else:
        values.append(one)
        values.sort()
        ind = values.index(one)
        if ind == 0:
            return values[1]
        elif ind == len(values) - 1:
            return values[-2]
        else:
            prev = values[ind - 1]
            next = values[ind + 1]
            d_prev = one - prev
            d_next = next - one
            if d_next == d_prev:
                return prev
            elif d_prev < d_next:
                return prev
            else:
                return next
#######################################################################################
def nearest_value(values: set, one: int) -> int:
    def distance(value): return abs(value - one), value > one
    return min(values, key=distance)
#######################################################################################
def nearest_value(values: set, one: int) -> int:
    return sorted([(abs(v - one), v) for v in values], key = lambda item: (item[0], item[1]))[0][1]
#######################################################################################
# ЗАДАЧА 14. Between Markers (simplified)
# Вам дана строка и два маркера (начальный и конечный).
# Вам необходимо найти текст, заключенный между двумя этими маркерами.
# Но есть несколько важных условий:
# Начальный и конечный маркеры всегда разные.
# Начальный и конечный маркеры всегда размером в один символ.
# Начальный и конечный маркеры всегда есть в строке и идут один за другим.
# Input: Три аргумента. Все строки. Второй и третий аргументы это начальный и конечный маркеры.
# Output: Строка.
# Пример:
# between_markers('What is >apple<', '>', '<') == 'apple'
# Как это используется: Может использоваться для парсинга небольшой верстки.
# Предусловия: Не может быть более одного маркера одного типа.

def between_markers(text: str, begin: str, end: str) -> str:
    return text[text.find(begin) + 1:text.find(end)]
#######################################################################################
def between_markers(text: str, begin: str, end: str) -> str:
    text = text.split(begin)[1]
    return text.split(end)[0]
#######################################################################################
def between_markers(text, m1, m2):
    return text[text.index(m1)+1:text.index(m2)]
#######################################################################################
from re import finditer
def between_markers(text, *m):
    return next(finditer((r"%s(.*)%s" % m).replace('[', '\[').replace(']', '\]'), text)).groups()[0]
#######################################################################################
def between_markers(text: str, begin: str, end: str) -> str:
    b = text.find(begin)
    e = text.find(end)
    return text[b + 1:e]
#######################################################################################
# ЗАДАЧА 15. Correct Sentence
# На вход Вашей функции будет передано одно предложение.
# Необходимо вернуть его исправленную копию так,
# чтобы оно всегда начиналось с большой буквы и заканчивалось точкой.
# Обратите внимание на то, что не все исправления необходимы.
# Если предложение уже заканчивается на точку,
# то добавлять еще одну не нужно, это будет ошибкой
# Входные аргументы: Строка (A string).
# Выходные аргументы: Строка (A string).
# Пример:
# correct_sentence("greetings, friends") == "Greetings, friends."
# correct_sentence("Greetings, friends") == "Greetings, friends."
# correct_sentence("Greetings, friends.") == "Greetings, friends."
# Предусловия: В начале и конце нет пробелов, текст состоит только из пробелов, a-z A-Z , и .

def correct_sentence(str):
    text = ""
    str = list(str)
    str[0] = str[0].upper()
    if "." not in str:
        str += "."
    str = "".join(str)
    return str
#######################################################################################
def correct_sentence(text: str) -> str:
    text = text[0].upper() + text[1:]
    if text[-1] != '.':
        text = text + '.'
    return text
#######################################################################################
def correct_sentence(text: str) -> str:
    text = text[0].upper() + text[1:]
    if text[-1] != ".":
        text +='.'
    return text
#######################################################################################
def correct_sentence(text: str) -> str:
    if text[-1] == '.':
        return text[0].upper() + text[1:]
    else:
        return text[0].upper() + text[1:] + '.'
#######################################################################################
def correct_sentence(text: str) -> str:
    text = list(text)
    begin = text[0]
    end = text[-1]
    text[0] = begin if begin.isupper() else begin.upper()
    text = text if end == '.' else text + ['.']
    return ''.join(text)
#######################################################################################
def correct_sentence(text: str) -> str:
    return text[0].capitalize() + text.rstrip('.')[1:] + '.'
#######################################################################################
def correct_sentence(text: str) -> str:
    return text[0].upper() + text[1:] + '.' * (not text.endswith('.'))
#######################################################################################
def correct_sentence(text: str) -> str:
    a='' if text[-1]=='.' else '.'
    return text[0].upper()+ text[1:] +a
#######################################################################################
# ЗАДАЧА. Is Even
# Проверить является ли число четным или нет.
# Ваша функция должна возвращать True если число четное,
# и False если число не четное.
# Входные данные: Целое число.
# Выходные данные: Логический тип.
# Пример:
# is_even(2) == True
# is_even(5) == False
# is_even(0) == True
# Где это используется: (математика используется везде)
# Условия: целые числа даны в диапазоне от -1000 и до 1000

def is_even(num: int) -> bool:
    if num % 2 == 0:
        return True
    elif num == 0:
        return True
    else:
        return False
#######################################################################################
def is_even(num: int) -> bool:
    return num & 1 == 0
#######################################################################################
def is_even(num: int) -> bool:
    return not bool(num%2)
#######################################################################################
def is_even(num: int) -> bool:
    return not num % 2
#######################################################################################
def is_even(num: int) -> bool:
    if num % 2 != 1:
        return True
    return False
#######################################################################################
def is_even(num: int) -> bool:
    return bin(num)[-1]=='0'
#######################################################################################
# ЗАДАЧА. Sum Numbers
# Вам дан текст в котором нужно просуммировать числа,
# но только разделенные пробелом.
# Если число является частью слова, то его суммировать не нужно.
# Текст состоит из чисел, пробелом и английского алфавита.
# Входные данные: Строка.
# Выходные данные: Целое число.
# Пример:
# sum_numbers('hi') == 0
# sum_numbers('who is 1st here') == 0
# sum_numbers('my numbers is 2') == 2
# sum_numbers('This picture is an oil on canvas '
#  'painting by Danish artist Anna '
#  'Petersen between 1845 and 1910 year') == 3755
# sum_numbers('5 plus 6 is') == 11
# sum_numbers('') == 0

def sum_numbers(text: str) -> int:
    return sum(( int(word) for word in text.split() if word.isdigit()))
#######################################################################################
def sum_numbers(text: str) -> int:
    s = 0
    for l in text.split():
        try:
            s += int(l)
        except ValueError:
            continue
    return s
#######################################################################################
class text_with_number:
    def __init__(self, text):
        self.text = text
    def add_numbers(self):
        answer = 0
        for word in self.text.split():
            if word.isdigit():
                answer += int(word)
        return answer
def sum_numbers(text):
    return text_with_number(text).add_numbers()
#######################################################################################
def sum_numbers(text: str) -> int:
    count = 0
    spl_text = text.split(' ')
    for i in spl_text:
        i.replace(' ', '')
        if i.isnumeric():
            count += int(i)
    return count
#######################################################################################
def sum_numbers(text: str) -> int:
    # your code here
    return sum(map(lambda x: int(x), filter(lambda x: x.isnumeric(), text.split())))
#######################################################################################
def sum_numbers(text: str) -> int:
    summary = 0
    lsttext = text.split()
    for countwords in range(0, len(lsttext)):
        if lsttext[countwords].isdigit(): summary += int(lsttext[countwords])
    return summary
#######################################################################################
def sum_numbers(text: str) -> int:
    L = text.split()
    ans = 0
    for n in L:
        if n.isdecimal():
            ans += int(n)
    return ans
#######################################################################################
def sum_numbers(text: str) -> int:
    # your code here
    def numbers(t):
        try:
            return int(t)
        except:
            return 0
    try:
        return __import__("functools").reduce(lambda a,c: a+c,(numbers(t) for t in text.split()))
    except:
        return 0
#######################################################################################
# ЗАДАЧА 2. Even the Last
# Дан массив целых чисел.
# Нужно найти сумму элементов с четными индексами (0-й, 2-й, 4-й итд),
# затем перемножить эту сумму и последний элемент исходного массива.
# Не забудьте, что первый элемент массива имеет индекс 0.
# Для пустого массива результат всегда 0 (ноль).
# Входные данные: Список (list) целых чисел (int).
# Выходные данные: Число как целочисленное (int).
# Примеры:
# checkio([0, 1, 2, 3, 4, 5]) == 30
# checkio([1, 3, 5]) == 30
# checkio([6]) == 36
# checkio([]) == 0
# Зачем это нужно: Индексы и срезы - очень важные элементы программирования,
# как на Python, так и на других языках. Это поможет вам в дальнейшем.
# Предусловия: 0 ≤ len(array) ≤ 20
# all(isinstance(x, int) for x in array)
# all(-100 < x < 100 for x in array)

def checkio(array: list) -> int:
    """
        sums even-indexes elements and multiply at the last
    """
    return sum(array[i] for i in range(len(array)) if i % 2 == 0) * array[-1] if len(array) > 0 else 0
#######################################################################################
def checkio(array):
    if len(array) == 0:
        return 0
    return sum(array[0::2]) * array[-1]
#######################################################################################
checkio=lambda x: sum(x[::2])*x[-1] if x else 0
#######################################################################################
def checkio(array):
    return 0 if not array else sum(array[::2]) * array[-1]
#######################################################################################
from itertools import islice
def checkio(array):
    return sum(islice(array, None, None, 2)) * array[-1] if array else 0
#######################################################################################
def checkio(array):
    from numpy import sum
    if len(array) > 0:
        return int(sum(array[::2])*array[-1])
    else:
        return 0
#######################################################################################
import numpy as np

class even_the_last:
    def __init__(self, array):
#        array = np.array(array)
        self.array = array

    def perform(self):
        if not self.array.shape[0]:
            return 0
#        even_sum = np.sum(self.array[0::2])
        last = self.array[-1]
#        return even_sum * last

def checkio(array):
    return even_the_last(array).perform()
#######################################################################################
def checkio(array: list) -> int:
    """
        sums even-indexes elements and multiply at the last
    """
    sum = 0
    if len(array) == 0:
        return 0
    else:
        for n in range(len(array)):
            if (n % 2) == 0:
                sum = sum + array[n]
            result = sum * array[-1]
        return result
#######################################################################################
# ЗАДАЧА. Three Words
# Давайте научим наших роботов отличать слова от чисел.
# Дана строка со словами и числами, разделенными пробелами
# (один пробел между словами и/или числами).
# Слова состоят только из букв.
# Вам нужно проверить есть ли в исходной строке три слова подряд .
# Для примера,
# в строке "start 5 one two three 7 end"
# есть три слова подряд.
# Входные данные: Строка со словами (str).
# Выходные данные: Ответ как логическое выражение (bool), True или False.
# Примеры:
# checkio("Hello World hello") == True
# checkio("He is 123 man") == False
# checkio("1 2 3 4") == False
# checkio("bla bla bla bla") == True
# checkio("Hi") == False
# Зачем это нужно: Эта задача подскажет вам как работать со строками и покажет некоторые полезные функции.
# Предусловия: Исходная строка содержит только слова и/или числа.
# Смешанных слов нет (перемешанные цифры и буквы).
# 0 < len(words) < 100

def checkio(words: str) -> bool:
    count = 0
    for i in words.split():
        if not i.isalpha():
            count = 0
        else:
            count += 1
        if count == 3:
            return True
    return False
#######################################################################################
def checkio(words: str) -> bool:
    count = 0
    word_list = list(words.split())
    for word in word_list:
        count = (count + 1) * word.isalpha()
        if count == 3:
            return True
    else:
        return False
#######################################################################################
def checkio(words: str):
    wl=words.split(' ')
    tf=list(map(lambda x: bool(x.isalpha()),wl))
    tf=''.join(str(tf))
    return bool('True, True, True' in tf)
########################################################################################
import numpy as np

class Three_Words:
    def __init__(self, words):
        self.words = words

    def perform(self):
      foo = np.array([w for w in self.words.split()])
        count = 0
       for i in range(np.size(foo)):
          if not foo[i].isdigit():
                count += 1
                if count == 3:
                    return True
            else:
                count = 0

       return False
########################################################################################
def checkio(words: str) -> bool:
    successive_words = 0

    for word in words.split():
        successive_words = (successive_words + 1 if word.isalpha() else 0)
        if successive_words == 3:
            return True

    return False
#######################################################################################
from itertools import groupby


def checkio(words: str) -> bool:
    words = map(str.isalpha, words.split())
    return max(sum(j) for _, j in groupby(words)) >= 3
#######################################################################################
# ЗАДАЧА. Right to Left
# "На протяжении веков, левши страдали от дискриминации в мире,
# созданном для правшей."
# Santrock, John W. (2008).
# Motor, Sensory, and Perceptual Development.
# "Большинство людей (70-95%) правши,
# меньшинство (5-30 %) левши,
# и неопределеное число людей
# вероятно лучше всего охарактеризовать,
# как "симметричные"."
# Scientific American.
# www.scientificamerican.com
# Один робот был занят простой задачей:
# объединить последовательность строк
# в одно выражение для создания инструкции
# по обходу корабля.
# Но робот был левша и зачастую шутил и запутывал своих друзей правшей.
# Дана последовательность строк.
# Вы должны объединить эти строки в блок текста,
# разделив изначальные строки запятыми.
# В качестве шутки над праворукими роботами,
# вы должны заменить все вхождения слова
# "right" на слова "left",
# даже если это часть другого слова.
# Все строки даны в нижнем регистре.
# Входные данные: Последовательность строк.
# Выходные данные: Текст, как строка.
# Пример:
# left_join(("left", "right", "left", "stop")) == "left,left,left,stop"
# left_join(("bright aright", "ok")) == "bleft aleft,ok"
# left_join(("brightness wright",)) == "bleftness wleft"
# left_join(("enough", "jokes")) == "enough,jokes"
# Как это используется: Это просто пример операций,
# использующих строки и последовательности.
#
# Предусловие:
# 0 < len(phrases) < 42

message_text = ("left", "right", "left", "stop")
print(type(message_text))
def left_change_right(message_text):
    jointext = ','.join(message_text)
    print(jointext)
    print(type(jointext))
    jointext = jointext.replace('left', 'right')
    return jointext
#######################################################################################
def left_join(phrases: tuple) -> str:
    """
        Join strings and replace "right" to "left"
    """
    strphrases = ','.join(phrases)
    newstrphrases = strphrases.replace('right', 'left')
    return newstrphrases
#######################################################################################
def left_join(phrases):
    """
        Join strings and replace "right" to "left"
    """
    return (",".join(phrases)).replace("right","left")
#######################################################################################
def left_join(phrases: tuple) -> str:
    """
        Join strings and replace "right" to "left"
    """
    phrases_string = ','.join(list(phrases))
    return phrases_string.replace('right', 'left')
#######################################################################################
def left_join(phrases: tuple, /) -> str:
    """
        Join strings and replace "right" to "left"
    """

    phrases = ",".join(list(phrases)).replace("right", "left")

    return phrases
########################################################################################
import numpy as np

class right_to_left():
    def __init__(self, phrases):
        self.phrases = phrases

#    def perform(self):
#        replaced_words_array = np.array([p.replace('right', 'left') for p in self.phrases])
#        replaced_words_list = replaced_words_array.tolist()
#        return ",".join(replaced_words_list)

def left_join(phrases: tuple) -> str:
    foo = right_to_left(phrases)
    return foo.perform()

def left_join(phrases):
    return ",".join(k.replace('right', 'left') for k in phrases)
#######################################################################################
# # coding: utf-8
# 左 = 'left'
# 右 = 'right'
# 点 = ','
# 置換 = str.replace
# 合併 = str.join
#
# left_join = lambda 文:置換(合併(点, 文), 右, 左)

def left_join(phrases):
    """
        Join strings and replace "right" to "left"
    """
    a=""
    for i in phrases:
        a=a+","+i
    a=a[1:].replace("right", "left")
    return a
#######################################################################################
# ЗАДАЧА. First Word
# Дана строка и нужно найти ее первое слово.
# При решении задачи обратите внимание на следующие моменты:
# - В строке могут встречатся точки и запятые
# - Строка может начинаться с буквы или, к примеру, с пробела или точки
# - В слове может быть апостроф и он является частью слова
# - Весь текст может быть представлен только одним словом и все
# Входные параметры: Строка.
# Выходные параметры: Строка.
# Пример:
# first_word("Hello world") == "Hello"
# first_word("greetings, friends") == "greetings"
# How it is used: first word is a command in command line
# Precondition: text can contain a-z A-Z , . '

def first_word(text: str) -> str:
    """
        returns the first word in a given text.
    """
    return text.replace('.', ' ').replace(',', ' ').split()[0]
#######################################################################################
# Explanation
# findall returns a list of all the matches so we need to append [0] to return only the first
# \b matches a word boundary
# [\w'] matches any word character or '
# [\w']+ is a greedy match for an uninterrupted sequence of word characters or '

import re

def first_word(text: str) -> str:
    return re.findall(r"\b[\w']+\b", text)[0]
#######################################################################################
def first_word(text: str) -> str:
    word_beginning, word_end = None, None
    for index, symbol in enumerate(text):
        if word_beginning is None and symbol.isalpha():
            word_beginning = index
        if word_beginning is not None:
            if symbol.isalpha() or symbol == "\'":
                continue
            else:
                word_end = index
                break
    return text[word_beginning:word_end]
#######################################################################################
def first_word(text: str) -> str:
    text_sliced = list(text)
    word = []
    for i in range(len(text_sliced)):
        if text_sliced[0].isalpha() or (text_sliced[0] == "-" or text_sliced[0] == "'") and len(word) > 0:
            word.append(text_sliced.pop(0))
        elif len(word)== 0:
            del text_sliced[0]
        else:
            break
    if len(word)>0:
            return ("".join(word))
#######################################################################################
def first_word(text: str) -> str:
    # your code here
    i = 0
    res = ''
    flag = 0
    while i < len(text):
        if 'a'<=text[i]<='z' or 'A'<=text[i]<='Z'  or text[i] == "'":
            res += text[i]
            flag = 1
        else:
            if flag == 1:
                break
        i += 1
    return res
#######################################################################################
import re
def first_word(text: str) -> str:
    return (re.search("[A-Za-z']+", text)).group()
#######################################################################################
import re

def first_word(text: str, /) -> str:
    text = re.sub("[.,]", " ", text)
    text.split()
    return text.split()[0]
#######################################################################################
def first_word(text: str) -> str:
    s1 = [".", ","]
    c = ''
    for i in range(len(text)):
        if text[i] not in s1:
            c += text[i]
        else:
            c += " "
    s = c.split()
    return s[0]
#######################################################################################
def add_tagget_to_note():

    """добавляет вашу следующую цель в блокнот,
    добавляя эту цель в .txt файл к уже там сохранёным.
    и сохроняет файл"""

    with open('target_note.txt', 'a', encoding='utf-8') as f:
        with open('target_note.txt', 'r', encoding='utf-8') as fread:

            while True:
                next_target = input(f"\033[38mКакая ваша следующая цель? опишите её: ")
                if next_target == 'quit':
                    break
                f.write(f'{next_target}\n')

def targets_to_list():
    """Возвращает содержимое файсла с целями в виде списка целей"""
    with open('target_note.txt', 'r', encoding='utf-8') as fread:
        target_list = []
        for line in fread:
            target_list.append(line)
        return target_list

def all_targets_print():
    """Выводит все цели и нумирует их"""
    with open('target_note.txt', 'r', encoding='utf-8') as fopen:
        i = 0
        for line in fopen:
            i += 1
            print(f'ЦЕЛЬ № {i}: {line}', end='')

def hallo_yellow(hallo_text):
    """Делает приветственный текст жлтым"""
    print("\033[33m{}".format(hallo_text))

def red_attention(attention_text):
    """Делает подсказку по навигации. в крансом цвете"""
    print("\033[31m{}".format(attention_text))


attention_text = '!!! - quit: для просмотра всех целей наберите quit !!!\n'
red_attention(attention_text)

hallo_text = 'Это блокнот выших целей.\nДобавляйте сюда свои цели\n'
hallo_yellow(hallo_text)

with open('target_note.txt', 'a', encoding='utf-8') as f:
    add_tagget_to_note()
#    print(f'\nВаши записи: {targets_to_list()} \n')

all_targets_print()
#######################################################################################

#######################################################################################