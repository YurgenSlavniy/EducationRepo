print('first you read this')
# пайчарм позволяет нам изменять настройки шрифта, также можно изменять темы.
# когда у нас код написан, попробуем запустить наш файл. ПКМ --> run (ctrl shift f10)
# внизу у нас будет открываться окно в котором м будем смотреть как работает программа
# таким образом удобно сразу изменять программу и смотреть на результат
# запускаем заново и видим у нас есть 2 строчки - first you read this
#######################################################################################
import sys

print(sys.argv[0])
# следствие выполнения -> узнаем путь где находится наш файл
# C:/Users/777/Desktop/практика/python/educationCourseAll.py/pr1helloworld.py
#######################################################################################
import sys

for arg in sys.argv:
    print(arg + " : " + type(arg))
#######################################################################################
# """
# параметр ping - > функция выводит pong
# 2 параметра name и имя человека <Имя> - > функция приветствия пользователя
# параметр list показать содержтимое текущей директории
# """

import sys, os

def ping():
    print('PonG')

def hello(name):
    print('Приветствую ', name)

def get_info():
    print(os.listdir())

comand = sys.argv[1]

if comand == 'ping':
    ping()
elif comand == 'list':
    get_info()
elif comand == 'name':
    name = sys.argv[2]
    hello(name)
#######################################################################################
# Запросить у пользовтеля число, сохранить в переменную,
# прибавить к числу 2, вывести результат на экран

a = int(input('Введите целое положительное число '))
a = a + 2
print('результат ', a)
#######################################################################################
# Используя цикл, запрашивайте у пользователя число, пока оно не станет больше 0, 
# но меньше 10. После того, как пользователь введет корректное число, 
# возведите его в степень 2 и выведите на экран.

number = int(input('Введите пожалуйста число'))

if number >= 10:
    print('Забыл предупредить число от 0 до 10')
else:
    print('Возвожу в степень 2 и получаю ', number**2)

print('вариант для программки с циклом')
number = int(input('Введите пожалуйста число'))
while number >= 10:
    print('Забыл предупредить число от 0 до 10')
    number = int(input('Введите пожалуйста число'))
print('Возвожу в степень 2 и получаю ', number ** 2)
print('---->')
#######################################################################################
# Создайте программу “Медицинская анкета”, 
# где вы запросите у пользователя следующие данные: имя, фамилия, возраст и вес.
# Выведите результат согласно которому:
# Пациент в хорошем состоянии, если ему до 30 лет и вес от 50 и до 120 кг,
# Пациенту требуется заняться собой, если ему более 30 и вес меньше 50 или больше 120 кг
# Пациенту требуется врачебный осмотр, если ему более 40 и вес менее 50 или больше 120 кг.
# Все остальные варианты вы можете обработать на ваш вкус и полет фантазии.

# (Формула не соответствует реальной действительности и здесь используется только ради примера)
# Примечание: при написание программы обратите внимание на условия в задаче и в вашем коде.  
# Протестируйте программу несколько раз и убедитесь, что проверки срабатывают верно. 
# В случае ошибок, уточните условия для той или иной ситуации.
# Пример: Вася Пупкин, 29 год, вес 90 - хорошее состояние
# Пример: Вася Пупкин, 31 год, вес 121 - следует заняться собой
# Пример: Вася Пупкин, 31 год, вес 49 - следует заняться собой
# Пример: Вася Пупкин, 41 год, вес 121 - следует обратится к врачу!
# Пример: Вася Пупкин, 41 год, вес 49 - следует обратится к врачу!

print('Medical questionnaire. Медицинский опросник')
print('---->')

name = input('What is name? Введите имя: ')
surname = input('What is surname? Введите фамилию: ')
age = int(input('How old ? Каков возраст?'))
mas = int(input('What is weigth? Сколько весит?'))

if age <= 30 and mas >= 50 and mas <= 120:
    print('Имя:', name, ', Фамилия:', surname, ', Возраст:', age, ', Вес:', mas, ' ---> Хорошее состояние ')
elif age > 30 and age < 40 and mas < 50 or mas > 120 and age > 30 and age < 40:
    print('Имя:', name, ', Фамилия:', surname, ', Возраст:', age, ', Вес:', mas, ' ---> Следует заняться собой ')
elif age >= 40 and mas <= 50 or mas >= 120 and age >=40:
    print('Имя:', name, ', Фамилия:', surname, ', Возраст:', age, ', Вес:', mas,' ---> Требуется врачебный осмотр ')
else:
    print('Имя:', name, ', Фамилия:', surname, ', Возраст:', age, ', Вес:', mas,)
#######################################################################################
# Запросить у пользовтеля число, сохранить в переменную,
# прибавить к числу 2, вывести результат на экран

a = int(input('Введите число: ')) # Создадим переменную a , воспользуемся фунуцией input и попросим пользователя ввести число.
# в переменную a мы присваиваем значение которое ввёл пользователь.
# C помощью функции int() преобразуем строковый тип данных в числовой.
print(a + 2) # выводим на экран результат математической операции
#######################################################################################
# Используя цикл, запрашивайте у пользователя число, пока оно не станет больше 0, 
# но меньше 10. После того, как пользователь введет корректное число, 
# возведите его в степень 2 и выведите на экран.

while True: # Воспользуемся конструкцией while True: цикл будет крутиться, пока мы не воспользуемся командой break.
    number = int(input('Введите число: ')) # Внутри цикла объявляем переменную number и присваиваем ей значение, которое вводит пользователь и преобразуем это значение в числовой тип данных с помощью int()
    if number >= 0 and number <= 10: # Далее ЕСЛИ это число БОЛЬШЕ 0 И МЕНЬШЕ 10
        print('возводим в степень 2 ваше число: ', number**2) # печатаем сообщение 'возводим в степень 2 ваше число' и проделываем математическую операцию number**2
# Вывводим результат на пользователю : сообщение и число возведённое в степень 2.
        break # после вывода сообщения выходим из цикла,
    else: # если первое условие не выполнилось, то есть введёное число больше 10 или меньше 0 , мы выполняем условие else
        print('Нужно ввести число от 0 до 10') # выводим на экран сообщение. Второе условие, как программа действует, когда первое условие не выполнено.
# мы выводим сообщение , но из цикла не выходим, тк условие выхода из цикла не выполнено, и повторно должны вводить число.
#######################################################################################
# Создайте программу “Медицинская анкета”, где вы запросите у пользователя следующие данные: имя, фамилия, возраст и вес.
# Выведите результат согласно которому:
# Пациент в хорошем состоянии, если ему до 30 лет и вес от 50 и до 120 кг,
# Пациенту требуется заняться собой, если ему более 30 и вес меньше 50 или больше 120 кг
# Пациенту требуется врачебный осмотр, если ему более 40 и вес менее 50 или больше 120 кг.

name = input('Введите имя: ')
surname = input('Введите фамилию: ')
age = int(input('Каков возраст?'))
mas = int(input('Сколько весит?'))
# сперва организуем ввод данных, создадим переменные которым присвоются значения вводимые пользователем. Причём для переменных age и mas указываем тип данных целое число int()
# с помощью функции input запрашиваем у пользователя ввести данные. После того когда у нас есть данные, начинаем проверять условия
if age <= 30 and mas >= 50 and mas <= 120: # начинаем проверять условия - возраст <= 30 логический оператр and (И), вес больше или равно 50 И (and) вес МЕНЬШЕ или равно 120
    print(name, surname, age, ' год ', ' вес ', mas, '---> Хорошее состояние')# для начала выведим результат и после того как всё проверим добавим ещё вывод имени, фамилии, возраста, веса
elif age > 30 and age < 50 and mas < 50 and mas > 120: # после проверки первого условия, начинаем проверять следующее условие. age >= 30 and mas <= 50 and mas >= 120:
    print(name, surname, age, ' год ', ' вес ', mas, '---> Следует заняться собой') # если условия второй проверки оказались Истиной - выводим соответствующее сообщение.  И идём на следующую проверку
elif age >= 50 and mas < 50 and mas > 120: # производим третью проверку условий и выводим на экран соотвтетствующее сообщения, если условия Верны.
    print(name, surname, age, ' год ', ' вес ', mas, '---> Следует обратиться к врачу')
# Для более красивого вывода информации добавим в print наши переменные.: print(name, surname, age, ' год ', ' вес ', mas, '...)
#######################################################################################
# Даны два произвольные списка. Удалите из первого списка элементы присутствующие во втором списке.
#     Примечание. Списки создайте вручную, например так:
# my_list_1 = [2, 5, 8, 2, 12, 12, 4]
# my_list_2 = [2, 7, 12, 3]

# 1 способ - использование множеств set для локоничного решения
a = [1, 2, 3, 4] # у нас есть список 1
b = [2, 3]  # у нас есть список 2

result = set(a) - set(b) # попробуем использовать приведение к  классу сет
# задаем переменную и присваиваем ей значение операции вычитания классов set
print(list(result)) # для красивого вывода снова приведём результат к списку
#  посмотрим что получилось и действительно при этих данных всё работает?

# но если наша последовательность будет содержать повторяющиеся элементы
a = [1, 1, 2, 1, 3, 4]
b = [2, 3]
# если мы применим предыдущий метод, мы снова получим в результате [1,4]
# хотя должны получить [1,1,1,4]
# т.к. во множествах удаляются повторяющиеся элементы, приведя к множествам мы теряем единицы
# классический вариант решения - цикл for
# работаем со списками в которых есть дублирование данных.
for number in a: # записываем первый цикл for - для элемента из списка а
   if number in b: # если мы находим этот элемент в списке b
       a.remove(number) # мы удаляем этот элемент из списка а
print(a) # после прохода всех циклов и проверки условий выводим список а из которого исключили элементы b
# что будет если мы проходимся циклом по списку и при этом удаляем элемент из этого же списка?
# вводим иные данные и программа работает неккооректно:
a = [1, 1, 2, 1, 2, 2, 2, 3, 4, 2, 2, 6]
b = [2, 3]
for number in a:
   if number in b:
       a.remove(number)
print(a)
# программа ожет пропускать какие то элементы, если они стоят подряд
# Нужно быть внимательным, когда мы идём циклом по списку и удаляем элементы из этого списка
# Лучше будет организовать цикл по копии этого списка
# Правильный третий пример:
a = [1, 1, 2, 1, 2, 2, 2, 3, 4, 2, 2, 6]
b = [2, 3]

for number in a[:]: # достаточно просто делать срез от начала и до конца списка
# когда делаем таким образом мы будем работать не с самим списком, а создавать его копию

    if number in b:
        a.remove(number) # а удаляем число непосредственно из списка
print(a)
# срезы надо делать не всегда, а только когда делаем удаление из списка
#######################################################################################
# Дана дата в формате dd.mm.yyyy, например: 02.11.2013. Ваша задача — вывести дату в текстовом виде, например: второе ноября 2013 года. Склонением пренебречь (2000 года, 2010 года)
data = '02.11.2013'
# для начала нужно разбить дату на три части: месяц, год, день
d, m, y = data.split('.') # удобно сделать с помощью функции split
# объявляем переменные  d, m, y , берём нашу дату, используем функцию сплит и в качестве разделителя у нас будет точка
print(d, m, y)
# далее необходимо преобразовать строку в текстовый вид
# самый удобный способ для этого - использование словаря
months = {
    '01': 'Январь',
    '02': 'Февраль',
    '03': 'Март',
    '04': 'Апрель',
    '05': 'Май',
    '06': 'Июнь',
    '07': 'Июль',
    '08': 'Август',
    '09': 'Сентябрь',
    '10': 'Октябрь',
    '11': 'Ноябрь',
    '12': 'Декабрь',
}

days = {
    '01': 'Первое',
    '02': 'Второе',
    '03': 'Третье',
    '04': 'Четвёртое',
    '05': 'Пятое',
    '06': 'Шестое',
    '07': 'Седьмое',
    '08': 'Восьмое',
    '09': 'Девятое',
    '10': 'Десятое',
    '11': 'Олиннадцатое',
    '12': 'Двенадцатое',
    '13': 'Тринадцатое',
    '14': 'Четырнадцатое',
    '15': 'Пятнадцатое',
    '16': 'Шестнадцатое',
    '17': 'Семнадцатое',
    '18': 'Восемнадцатое',
    '19': 'Девятнадцатое',
    '20': 'Двадцатое',
    '21': 'Двадцать первое',
    '22': 'Двадцать второе',
    '23': 'Двадцать третье',
    '24': 'Двадцать четвёртое',
    '25': 'Двадцать пятое',
    '26': 'Двадцать шестое',
    '27': 'Двадцать седьмое',
    '28': 'Двадцать восьмое',
    '29': 'Двадцать девятое',
    '30': 'Тридцатое',
    '31': 'Тридцать первое',
}
# сформируем строку одним из самых удобных способов:
result = f'{days[d]} {months[m]} {y} года.' # Объявим переменную резалт, ставим букву f и будем создавать нашу строчку
# Вначале нам необходимо вывести день текстом. Мы берём словарь days, в качестве ключа мы будем передовать  переменную d
# т.е из 01 мы будем получать слово Первое
# аналогично делаем с месяцем. Берём словарь months, всё это помещаем в фигурные скобки, чтобы можно было встроить переменную в строку. Ключь уже будет переменная м
# после этого год мы выводим без изменений.
print(result)
#######################################################################################
# Дан список заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут только уникальные элементы исходного.
#     Примечание. Списки создайте вручную, например так:
# my_list_1 = [2, 2, 5, 12, 8, 2, 12]
#
# В этом случае ответ будет:
# [5, 8]

my_list3 = [3, 56 ,77 ,2 , 4, 3 ,77 ,108 , 56, 2, 3]
# воспользуемся способом определения количества вхождения элементов в список
result = [] # объявляем переменную, это будет результирующий список и он пока пустой
for number in my_list3: # переберать будем циклом for
    if my_list3.count(number) == 1: # это метод, который проверяет, сколько раз число входит в список
# если число входит в список 1 раз: count(number) == 1
        result.append(number) # то мы в результирующий список добавляем наше число number
print(result)
#######################################################################################
# В этой игре человек загадывает число, а компьютер пытается его угадать.
# В начале игры человек загадывает число от 1 до 100 в уме или записывает его на листок бумаги.
# Компьютер начинает его отгадывать предлагая игроку варианты чисел.
# Если компьютер угадал число, игрок выбирает “победа”.
# Если компьютер назвал число меньше загаданного, игрок должен выбрать “загаданное число больше”.
# Если компьютер назвал число больше, игрок должен выбрать “загаданное число меньше”.
# Игра продолжается до тех пор пока компьютер не отгадает число.
# Пример игры:
# Допустим, пользователь загадал число 42
# `15
#
# 35
#
# 96
# <
# 37
#
# 74
# <
# 52
# <
# 42
# =`
#
#     Примечание: Знаки “=”, “>” и “<” пользователь вводит с клавиатуры для общения с компьютером.
#     Вы можете использовать этот способ или придумать свой.

# шаг 1 - создание цикла для ввода данных
# в больших задачах мы не можем продумать все шаги сразу, поэтому
# двигаемся от более простых, к более сложным
#  Для начала можем создать цикл для ввода и выводаданных:
import random
while True: # сделаем его бесконечным, но в последствии сможем улучшить выход из цикла
    number = random.randint(1, 100) # программа пытается его угадать и например генерирует  случайное число от о до 100
    print(number) # выводим число которое сгенерировал компьютер.
    result = input('= > <') # подсказываем пользователю, что нужно выбрать, равно, больше или меньше
    if result == '=': # сначала начнём с наилучшего результата, если пользователь сказал, что число равно загаданному
        print('Победа!') # выводим победа
        break # выходим из бесконечного цикла. На этом программа заканчивается
    elif result == '>': # иначе, если. Если число больше, то выполняем это
        pass # ставим пока заглушку
    elif result == '<': # отрабатываем вариант, если число меньше
        pass  # ставим пока заглушку
#   У нас есть каркас программы который можем в дальнейшем расширять.

# шаг 2: нам необходимо придумать алгоритм угадывания числа.
# в принципе, если компьютер будет называть случайные числа и их не повторять,
# то рано или поздно он догадается, какое число мы загадали
# Но также мы ему даём подсказки - > и <. больше или меньше
# таким образом компьютер должен постоянно сужать диапазон и уже из него например брать случайное число.
# для этого создадим 2 переменные: min_number - которая будет хронить минимальное число. Это число 1 изначально
# и max_number - это максимальное число. 100 изначальное число

min_number = 1
max_number = 100

import random
while True:
    number = random.randint(min_number, max_number) # используем начальные значения для диапазона случайных чисел. от 1 до 100
# таким образом компьютер может теперь угадывать значение от одного значения до другого значения
    print(number)
# Запишем для себя и пользователя подсказку, что означают знаки >, < , =
    result = input('= (компьютер угадал число) > (загаданное число больше вашего). < (загаданное число меньше вашего)')
    if result == '=':
        print('Победа!')
        break

# если загаданное число больше вашего
    elif result == '>':
# значит нам надо заменить минимальное число на текущее число.
        min_number = number + 1 # заменяем на текущее и добавляем единицу
# единицу добавляем для того, чтобы тоже самое число уже не угадывать

# теперь рассмотрим действия, если число меньше.
    elif result == '<':
        max_number = number - 1

# Шаг 3. После того как мы проверили, что всё работает как надо, мы можем попобывать улучшить нашу программу и цикл.
# уберём бесконечный цикл while True
# у нас есть условие победы, когда result = "="
# поэтому мы можем написать условие цикла
# цикл будет выполняться пока результат не равен = : while result != '=':
# чтобы мы вошли в цикл, надо объявить переменную result выше и присоить ей например None
# Мы пока не знаем чему у нас равняется результат
# Тогда победителя мы будем объявлять, когда вышли из цикла while
# Удаляем первый if? он нам больше не нужен, а elif превращается в if

min_number = 1
max_number = 100
result = None

import random
while result != '=':
    number = random.randint(min_number, max_number)
    print(number)
    result = input('= (компьютер угадал число) > (загаданное число больше вашего). < (загаданное число меньше вашего)')

    if result == '>':
        min_number = number + 1
    elif result == '<':
        max_number = number - 1
print('Победа!!!')

# программа уменьшилась, но всё ещё работает верно.
#######################################################################################
# 1: Создайте функцию, принимающую на вход имя, возраст и город проживания человека.
# Функция должна возвращать строку вида «Василий, 21 год(а), проживает в городе Москва»
def anketa():
    name = input('Введите имя')
    age = int(input('Введите возраст'))
    town = input('Введите город проживания')
    print(name, age, 'год (а), проживает в городе ', town )

anketa()
#######################################################################################
def person_info(name, age, city):
    result = f'{name}, {age}, год(а) проживает в городе {city}'
    return result
print(person_info('Василий', 21, 'Москва'))
# мы должны вспомнить об основных атрибутах функции
# это её параметры (name, age, city), название person_info
# и возвращаемое значение return result.
#
# Объявляем функцию def person_info, у неё три параметра (name, age, city)
# создаём переменную result, она будет строкой и формируем строку удобным нам образом
# f'{name}, {age}, год(а) проживает в городе {city}'
# подставляем в строку параметры функции
# после того как готов результат,делаем ретёрн и  будем его возвращать
# после того как функция написана мы её вызываем и передаём параметры .начинаем пользоваться
# print(person_info('Василий', 21, 'Москва'))
#######################################################################################
# Создайте функцию, принимающую на вход 3 числа и возвращающую наибольшее из них.
def max_from_3(first, second, third):
    numbers = [first, second, third]
    print(max(numbers))

max_from_3(90, 4, 28)
#######################################################################################
def get_max(a, b, c):
    result = max([a, b, c])
    return result
result = get_max(4, 7, 12)
print(result)
# Объявляем функцию def get_max
# у неё три параметра (a, b, c) три числа
# result = max([a, b, c]) - сформируем список из этих чисел
# и далее применим к нему функцию max
# не забываем делать return - возвращать результат работы функции
# теперь можно функцию использовать, например объявляем переменную result =
# вызываем функцию result = get_max()
# подставляем переменные: result = get_max(4, 7, 12)
# print(result) проверяем как работает, выводим результат
#######################################################################################
# Давайте опишем пару сущностей player и enemy через словарь, который будет иметь ключи и значения:
# name - строка полученная от пользователя,
# health = 100,
# damage = 50. ### Поэкспериментируйте с значениями урона и жизней по желанию.
# ### Теперь надо создать функцию attack(person1, person2). 
# Примечание: имена аргументов можете указать свои.
# ### Функция в качестве аргумента будет принимать атакующего и атакуемого.
# ### В теле функция должна получить параметр damage атакующего и отнять это количество 
#от health атакуемого.
# Функция должна сама работать со словарями и изменять их значения.
playername = input('Введите имя игрока: ')
player = {'name': playername, 'health': 100, 'damage': 75}
enemy = {'health': 74, 'damage': 34}


def attack(person1, person2):
    person1 = player
    person2 = enemy
    fight = person2['health'] - person1['damage']
    if fight > 0:
        person2['health'] = fight
        print(person2)
    else:
        print('Враг Повержен!')


attack(player, enemy)
#######################################################################################
player_name = input('Введите имя игрока: ')
player = {
    'name': player_name,
    'health': 100,
    'damage': 50
}

enemy_name = ('Введите имя врага: ')
enemy = {
    'name': enemy_name,
    'health': 50,
    'damage': 30
}

def attack(unit, target):
    target['health'] -= unit['damage']

attack(player, enemy)
print(player, enemy)

attack(enemy, player)
print(player, enemy)
# Создадим 2 словаря для описания сущностей.
# Словари содержат ключи: имя, здоровье, урон
# имя вводит пользователь
# def attack - создаём функцию, придумываем названия параметров:
# первый параметр - unit - кто атакует
# второй параметр - target - цель , кого атакуют
# т.к. имеем дело со словарями, будем их менять.
# берём словарь и ключ target['health'] и из этого здоровья вычитаем значение другого ключа
# target['health'] -= unit['damage']
# проверяем как работает
# attack(player, enemy) и attack(enemy, player)
# вызываем функцию с разными параметрами
#######################################################################################
# Давайте усложним предыдущее задание. Измените сущности, 
# добавив новый параметр - armor = 1.2 (величина брони персонажа)
# Теперь надо добавить новую функцию, 
# которая будет вычислять и возвращать полученный урон по формуле damage / armor
# Следовательно, у вас должно быть 2 функции:
# Наносит урон. Это улучшенная версия функции из задачи 3.
# Вычисляет урон по отношению к броне.
#
# Примечание. Функция номер 2 используется внутри функции 
# номер 1 для вычисления урона и вычитания его из здоровья персонажа.
player['armor'] = 1.2
enemy['armor'] = 1.5

def arm_atack(person1, person2):
    person1 = player
    person2 = enemy
    uron = person1['damage']/person1['armor']
#######################################################################################
player_name = input('Введите имя игрока: ')
player = {
    'name': player_name,
    'health': 100,
    'damage': 50,
    'armor': 1.2
}

enemy_name = ('Введите имя врага: ')
enemy = {
    'name': enemy_name,
    'health': 50,
    'damage': 30,
    'armor': 1.5
}
def get_demage(damage, armor):
    return damage/armor
def attack(unit, target):
    damage = get_demage(unit['damage'], target['armor'])
    target['health'] -= damage

attack(player, enemy)
print(player, enemy)

attack(enemy, player)
print(player, enemy)

# сначала добавим в словари новые значения  'armor': 1.2
# напишем ещё одну функцию get_demage. в неё передаём 2 параметра
# damage - урон и armor - величина брони
# эта функция будет возвращать результат return damage/armor
# теперь мы можем ф-ю get_demage использовать в функции attack
# для того чтобы расчитать величину урона
# damage = get_demage(unit['damage'], target['armor'])
# теперь  damage = get_demage
# в параметры нам надо передать сначала урон. Урон наносит unit
# берём unit['damage']
# второй параметр - это броня
# броню мы берём у target
# target['armor']
# после того как вычислили урон, отнимаем его от здоровья
# target['health'] -= damage
#######################################################################################
