# Создание и запуск проекта в pyCharm:
# - необходимо создать новый проект.
# - выбрать интерпритатор пайтон
# - создать модуль в котором будем писать код.
# - запуск программы с пайчарм.
#
# Запустим пайчарм первый раз. предлагает сначала импортировать настройки. Соглашаемся с лицензионным использованием. Будем отправлять статистику. Далее предлагается выбрать тему тёмную или светлую. Плагины оставим пок абез изменения. Криейт нью проджект.
# давайте напишем имя проекта. и нажимаем создать! можно изменить папку по умолчанию, путь куда сохранить файл.
# далее при запуске пайчарм будет настраивать окружение.после того как он это сделает мы сможем писать код. последующие разы когда мы будем запускать пайчарм он уже не будет это делать. все будет происходить гораздо быстрее
# перехожу далее в пайчарм и буду писать уже там. этот текст копирую туда же.
#
#Что мы видим, открыв пайчарм? :
#слева (лп) у нас есть структура проекта. Пайчарм создал для нас виртуальное окружение (venv library root) в котором мы можем работать.
#давайте создадим теперь в папке educationCourseAll.py  питон файл. пкм в лп по названию папки во всплывающем меню - new  -->  python file
#файлы у нас зоздаются с расширением py? именно эти файлы понимает интерпритатор, который мы установили.
#давайте напишем нашу первую программу хеллоу ворлд: файл - новый - pr1helloworld.py
#
print('first you read this')
# пайчарм позволяет нам изменять настройки шрифта, также можно изменять темы.
# когда у нас код написан, попробуем запустить наш файл. ПКМ --> run (ctrl shift f10)
# внизу у нас будет открываться окно в котором м будем смотреть как работает программа
# таким образом удобно сразу изменять программ уи смотреть на результат
# запускаем заново и видим у нас есть 2 строчки - first you read this
#
#______________________________
# УРОК 2 -  ПЕРЕМЕННЫЕ ТИПЫ ДАННЫХ ПРЕОБРАЗОВАНИЕ ТИПОВ.
#______________________________
#
# Переменные используют для хранения данных. Переменные можно использовать несколько раз. Можн менять значение и тип переменной.
#
print('Попугайчик')
print('Кеша')
print('в')
print(2)
print('года')
print('научился говорить')
print('своё имя')
print()
print('Через')
print('2')
print('года')
print('Он научился говорить')
print('сколько ему лет ')
print()
print(4)
# Программа просто выводит текст в консоль и когда мы её запустим просто увидим эту историю.
#  что будет если мы захотим изменить имя кеша на кузя? И поменять его возраст.
# в этом помогут переменные.
# Объявление переменной: - имя_переменной = значение переменной
pty = 'значение'
# Объявим три переменные : имя попугайчикаЮ присваиваем значение кеша. возраст попугайчика присваиваем значение 2 и период через который научился говорить пристваиваем 2.
name4 = 'Олег'
age = 1
period = 5
# далее внедряем эти переменные в наш код
print('Попугайчик')
print(name4) # внедрили переменную
print('в')
print(age) # внедрили переменную
print('года')
print('научился говорить')
print('своё имя')
print()
print('Через')
print(period) # внедрили переменную
print('года')
print('Он научился говорить')
print(age + period) # подсчитываем возраст попугайчика
#
# В программировании очень важно правильно называть переменные. Чтобы по её значению можно было понять для чего она нужна.
# верно: name, age person_name, age, request, report  Неправильно: а ва н56
# стиль имен переменных: маленькие буквы и нижнее подчёркивание имя_переменной
person_name = 'Max'
age = 30
period = 3.2
is_good = True
person = None
# Каждая переменная обладает определённым типом: тип переменной определяет множество значений, которые могут быть ей присвоены и операции которые могут быть с нею произведены.
# Он либо фиксирован в момент объявления переменной и соответствует одному из типов данных предоставляемых языком программирования (статическая типизация). либо в каждый момент соотвветствует типу тех данных, что содержит переменная (динамическая типизация)
# динамическая типизация: как только мы присваиваем значение переменной мы автоматически присваиваем ей соответствующий тип.
# целое число - int
# число с плавающей точкой - float
# логический тип (истина\ложь) - bool
# ничего (пустой тип) - None
# строка - str
#
# разберём типы данных на примере кода
person_name1 = 'Ivan' # верно  # у нас есть переменная Ivan которая называется  person_name1
print(type(person_name1)) # определяем тип данных # и мы можем определить её тип с помощью функции type
# пишем функцию type(person_name1) в скобках указываем переменную у которой мы хотим определить тип, с помощью принт всё это выводим на экран чтобы посмотреть результат.age1 = 34
# в нашем случае получим класс "str" - то есть переменная person_name1 у нас является строкой.
age1 = 30
print(type(age1)) # <class 'int'>
# тип у это переменной целое число
period1 = 3.2
print(type(period1)) # <class 'float'>
# число с плавающей точкой
is_good1 = True
print(type(is_good1)) # <class 'bool'>
# логический тип данных . принимает всего 2 значения: true истина или ложно false
person1 = None
print(type(person1)) # <class 'NoneType'>
#
# очень часто требуется привести один тип данных к другому.
# число к строке str(number)
# строка к числу int(word)
# любые другие преобразования аналагично

birthday_year = '1984'
print(type(birthday_year))
# мы прочитали из файла или ввёл пользователь год рождения и получилась у нас вместа числа строка. т.к записано в ковычках - это строчка.
period2 = 30
print(type(period2))
#  мы хотим подсчитать возраст пользователя через этот период времени.
age2 = int(birthday_year) + period2
# если не привести строку к числу пайтон выдаст ошибку так как не знает как складывать строки с числами
# если хотим получить строчку из этих данных: две строки слепливаются в одну. конкикинация.
age3 = birthday_year + str(period2)
#
#______________________________
# УРОК 3. ВВОД И ВЫВОД ДАННЫХ.
#______________________________
#
# куда можно выводить информацию
# как можно использовать функцию print
# как вводить данные
# какой тип у введёных данных.
#
# куда можно выводить информацию из программы пайтон?
# gui - какой нибудь графический интерфейс.
# web - в веб интерфейс
# мобильное приложение
# хранилище, например файл или база данных
# консоль (терминал)
#
# что может функция print. Функция print может вывести в терминал объекты любого типа данных
print('Peace') # выводит одно слово
print('Peace Мир тебе ') # выводит несколько слов
print('Peace 987 №4677  2@ 1!') # выводит любой набор символов
print(108) # выводит целое число
print(7.62) # выводит число с плавающей точкой
print(True) # выводит истину
print(False) # выводит ложь
print(None) # выводит NoneType
#
# мы можем выводить разные типы данных через запятую.
# Использовать разные разделители слов. (sep=) (end=)
print('Привет, меня зовут Генадий, я крокодил, мне 2 годика') # строка целиком
name3 = 'Никодим'
animal = 'ящер'
age4 = 6
# У нас есть 3 переменные. Как вывести строку вместе с переменными в терминал?
print(name3, animal, age4) # просто указываем переменные через запятую. print возьмёт эти переменные и сам сделает из них строчку
# как вывести эти 2 строчки не через пробел, а через другой символ . например через слэш /
# ещё один параметр функции print - сипаратор
print(name3, animal, age4, sep='/') # мы указываем иминованный параметр sep='' и присваиваем ему какое то значение
# таким образом можем использовать разделители
#
# перенос строки в функции print  end
print(person_name1, age1, end='\n') # \n - перенос строки, но можно воспользоваться другим разделителем символом
print(person, age4, end=';' )

# ввод данных input(). Практически любая программа не обходится без ввода данных.
# в консольном варианте в пайтоне мы будем использовать функцию input()
resultate = input() # функцией импут мы просим пользователя что нибудь ввести\. а результат записать обязательно в переменную
name1 = input('Как тебя зовут?') # с параметром, пользователь видит этот текст и далее вводит свои данные
# разберём пример
result = input() # делаем импут и результат сохраняем в переменную резалт. с переменной резалт можно в дальнейшем работать
print('Пользователь ввёл', result) # делаем вывод на экран
# запускаем программу и она не остановится, пока мы не введём данные. Будем вводить данные в терминал (нижнее окно программы). вводим какую нибудь строчку
name2 = input('Кто же ты такой?: ') # строка выводится как приглашение к вводу информации
print('Приветик', name2) # сохранённые в переменной name2 результат мы выводим с помощью принт.
# Программа становится интерактивной, когда в зависимости от введённых данных программа действует по разному
# ! тип введённых данных: чтобы мы ни спросили у пользователя для программы результатом ввода всегда будет строка (тип данных str)
# Давайте зададим пользователю три разных вопроса и в каждом разе посмотрим тип данных который получится в результате.
name = input('Как мне прикажите к вам обращаться?')
print(type(name))
age5 = input('сколько вам лет?')
print(type(age5))
numberpi = input('Вы знаете число пи?')
print(type(numberpi))
# независимо от вопроса результатом input всегда будет строчка.
age6 = int(input('сколько вам лет?'))
period3 = 11
age_period = age6 + period3 # чтобы избежать ошибкии от того что тип данных у нас разного класса (period3 - int), а (age6 - str)
age_period1 = period3 + age4
age_period2 = period3 + 4
# мы заранее преобразуем вводимые пользователем даные в тип - числовые int: age6 = int(input('сколько вам лет?'))
print('Через ', period3, 'годиков ', name, 'Вам будет ', age_period, 'годков'  )# далее выводим на экран строчку содержащую текст и значения трёх переменных
print('А Ящеру', name3, 'и Попугайчику Кеше', age_period1, 'и', age_period2, 'соответственно.', 'Попугайчики так долго не живут Кеша скорее всего уже умрёт',  end='\n' )
#
#
#______________________________
# УРОК 4. АРИФМЕТИЧЕСКИЕ И ЛОГИЧЕСКИЕ ОПЕРАЦИИ. СООТВЕТСТВИЕ НЕСКОЛЬКИИМ УСЛОВИЯМ and, or, not.
#______________________________
#
#
# Арифметические операции
# Приоритет арифметических операций
# Логические операции
# Сложные логические выражения
# Приоритет логических операций
#
# Стандартные математические операции : + - * / Сложение вычитание умножение деление
# тип результата.
#
# на примере математические операции расчёт нашей жизни
#
# средняя продолжительность жизни на планете Земля (лет)
ale = 71
age7 = int(input('Сколько полных лет вам сейчас. Может быть я повтаряюсь, но я ещё весьма юный иИ. Простите'))
after35 = age7 + 35 # операция сложения
print('Через 35 лет', name, 'вам будет', after35)
alive = ale - age7 # операция вычитания
print('По статичтике', name, 'вам осталось жить годиков так',alive)
count = 144000000
all_alive = count * ale # операция умножения
print('Среднее время жизни всех людей', all_alive)
live_part = age / ale # операция деления
print('Часть прожитой жизни', live_part)
print(type(live_part))
# типы данных. все операции возвращают тоот же тип данных, который мы используем.
# если мы делим одно целое число на другое у меня должен получится тип данных дробное число. Даже если делится нацело
# type(live_part) <class 'float'>
#
# ещё 3 типа полезных мат. операций: 
# // - целая часть от деления
# % - остаток от деления
# ** - возведение в степень
print(3%2)
print(4%2) # делится нацело остаток от деления 0
print(5%3)
# остаток от деления
print(2**10)
print(2**7)
# возведение в степень
# приоритет операций как в математике. сперва умножениеи деление потом сложение и вычитание
# круглые скобки управляют приоритетом. сперва делаем что в скобках
#
# Логические операции:
# ==  ровно
# !=  не ровно
# >   больше
# >=  больше или ровно
# <=  меньше или ровно
ale2 = 88
age8 = int(input('Вам может показаться, что это мой любимый вопрос... Но ещё разик сколько вам лет?'))
print('Спасибо за понимание', name)
print('-')
print('Ваш возраст равен средней продолжительности жизни ', ale2 == age8)
print('Ваш возраст НЕ равен средней продолжительности жизни ', ale2 != age8)
print('Ваш возраст меньше средней продолжительности жизни ', ale2 > age8)
print('Ваш возраст больше средней продолжительности жизни ', ale2 < age8)
print('Ваш возраст меньше или равен средней продолжительности жизни ', ale2 >= age8)
print('Ваш возраст больше или равен средней продолжительности жизни ', ale2 <= age8)
print('У Вас юбилей:', age8 % 5 == 0) # можем комбинировать расчёт с логической операцией

# Сложные логические выражения:
# and  - И (ИСТИНА когда все ИСТИНА, иначе ЛОЖЬ)
# or   - ИЛИ (ЛОЖЬ когда все ЛОЖЬ, иначе ИСТИНА)
# not  - НЕ (ИСТИНА когда ЛОЖЬ. ЛОЖЬ когда ИСТИНА)
# Они сробатывают точно также как в логике

ale1 = 56
age9 = int(input('Сколько же лет Никодиму?'))
print('У Никодима юбилей:', age9 % 5 == 0)
print('НЕ юбилей:', age9 % 5 != 0)
print('НЕ юбилей:', not age9 % 5 == 0)
print('Юбилей и возраст меньше среднепродолжительного: ', age9 % 5 == 0 and age9 < ale1)
print('У вас Юбилей или ваш возраст больше среднепродолжительного',  age9 % 5 == 0 or age < ale2)
# Приоритет логических выражений работает как в логике и математике
print((1 > 2 and (0 < 5 or 0 < 2)) and 0 == 0)
#
#
#______________________________
# УРОК 5. УСЛОВНЫЕ ОПЕРАТОРЫ. 
#______________________________
################################################