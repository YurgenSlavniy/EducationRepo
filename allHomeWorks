<meta charset="utf-8"> 
<script>
	/* <meta charset="utf-8"> - традиционное начало, где мы объявляем кодировку, которую будем использовать utf-8 для корректного отображения всех символов. в нашем случае русскоязычных.
	<script> - начало нашей программы на языке javascript - открывающийся тэг.*/
	alert("Привет, начинающий программист!"); // команда вывода информации на экран в отдельном окне. текстовая информация 
	var name = prompt("Как к вам обращаться?"); // мы задаём переменную командой "var", даём ей имя "name" и присваиваем некоторое значение символом " = " . Затем командой "prompt" даём запрос на ввод данных пользователем. Всё что напечатает пользователь присвоится переменной "name"
	alert("Ну здравствуй, " + name); // мы выводим на экран сообщение "Ну здравствуй, " командой " + " склеиваем строки и о что ввёл пользователь.
	// например пользователь вводит "Яков" в итоге переменной name присваивается значение Яков и выводится на экран сообщение : Ну здравствуй, Яков
	/* ниже тэг /script> закрывает открытый в начале тэг <script>. сама программа или тело программы находится между этими тэгами */
</script>


<meta charset="utf-8">
<script type="text/javascript">
/*1.Конвертер валют
Программа хранит в двух переменных курс доллара и евро. В первой переменной у вас хранится стоимость одного евро в рублях, во второй - стоимость одного доллара в рублях. Вы спрашиваете у пользователя, сколько рублей он хочет сконвертировать, получаете это число и считаете. Результат надо вывести на страницу с помощью alert.*/
	
	var courseeuro = prompt("Введите стоимость 1 евро в рублях"); // создаём переменную courseeuro в которую пользователь вводит курс 1 евро в рублях
	var coursedollar = prompt("Введите стоимость 1 доллара в рублях"); // создаём переменную coursedollar в которую пользователь вводит курс 1 доллара в рублях
	var ruble = prompt("Сколько у вас Рублей?"); // создаём переменную ruble в которую пользователь вводит колличество рублей которую необходимо сконвертировать в доллары и евро

	courseeuro = parseInt(courseeuro); // обьявляем переменную courseeuro числовой (не строковой)
	coursedollar = parseInt(coursedollar); // обьявляем переменную coursedollar числовой (не строковой)
	ruble = parseInt(ruble) // также переменную объявит числовой можно было с помощью символа "+" перед prompt, когда просили пользователя ввести сумму <=> var ruble = +prompt("Сколько у вас Рублей?")

	var euro = ruble / courseeuro // задаём переменную euro , которой присваиваем значение математической операции, где введённая пользователем переменная ruble делится на введёную пользователем переменную courseeuro. этой операцией мы производим конвертацию рублей в евро.
	var dollar = ruble / coursedollar // аналогичная предыдущей операция с помощью которой мы конвертируем рубли в доллары

	alert("У вас " + euro.toFixed(2)  + " Евро или " + dollar.toFixed(2) + " Долларов") // команда вывода на экран в отдельном окне 5 склеенных строк:
	// euro.toFixed(2) и dollar.toFixed(2), где команда "имя_переменной.toFixed(2)" после переменной означает показать 2 знака после запятой

</script> 


<meta charset="utf-8">
<script type="text/javascript">
/*2.Подсчет площади трапеции
Пользователь вводит длину оснований трапеции (a и b), а также высоту трапеции h. Программа выводит сообщение: «Площадь трапеции будет равна <значение>». Площадь вычисляется по формуле ((a + b) / 2) * h, где a, b - основания, h - высота.*/
	var a = prompt("Введите значения длины верхнего основаня трапеции"); 
	var b = prompt("Введите значения длины нижнего основаня трапеции");
    var h = prompt("Введите значение высоты трапеции");
// задаём переменные a,b,h и запрашиваем у пользователя ввести значения этих перемнных.
    a = parseInt(a);
    b = parseInt(b);
    h = parseInt(h);
// присваиваем этим переменным числовые значния с помощью команды parseInt()
    var s = (a + b) * h / 2
// создаём переменную s которой присваиваем значение вычислений площади трапеции, вычисления производятся по формуле с использованием введённых ранее пользователем переменных a,b,h
    alert("Площадь трапеции будет равна " + s );
// выводим на экран в отдельном окне ссобщение, где будет отображатьсе переменная s - площадь трапеции

</script>


<meta charset="utf-8">
<script type="text/javascript">

	/* Игра в загадки
a. Загадать загадку. Если ответ верен – поздравить пользователя. Затем сообщить, что игра окончена.
b. Если ответ неверный – написать пользователю, что он не угадал.
c. Добавить еще 3 загадки. Подсчитать количество правильных ответов, сообщить пользователю.
d. (По желанию). В качестве верного ответа принимать несколько вариантов ответов. Например, «Стул», «стул», «табуретка» и так далее. */
	var userAnswer = prompt("Я хочу сыграть с тобой в одну игру...\n Угадай загадку:\n ЗИМОЙ И ЛЕТОМ ОДНИМ ЦВЕТОМ. ЧТО ЭТО? \n "); 
// создаём специальную переменную (var userAnswer =), которая будет хронить ответ, который ввёл пользователь (через команду prompt)
	var score = 0; // создаём специальную переменную, которая будет подсчитывать число правильных ответов. изночально переменная = 0
	userAnswer = userAnswer.toLowerCase() // специальная команда, которая преобразует строку таким образом, что все большие буквы видоизменяет на маленькие (имя_переменной.toLowerCase() то есть переменная userAnswer, запрашиваемая пользователем автоматически переведёт в нижний регистр маленьких букв все символы которые будут большими буквами )
	if(userAnswer == "елка" || userAnswer == "доллар" ){
// задаём условие: сравниваем ответ пользователя (который находится в переменной userAnswer) с эталонным ответом (userAnswer == "елка") и (userAnswer == "доллар"), используем логический оператор ИЛИ. то есть если ответ пользователя равен == эталонному ответу (елка) или (доллар), то мы выводим на экран сообщение - "Праывльно! Возьми с полки пиражок!"
		alert("Праывльно! Возьми с полки пиражок!"); // сообщение которое выводится в случае правильного ответа, когда ответ совпадает с эталонным ответом
		score++; // к переменной подсчитывающей правильные ответы прибавляется 1, если ответ пользователя совпадает с эталонным ответом
	} else {
	alert("Не угадал!"); // сообщение которое выводится в случае, если пользователь не угадал правильный ответ. userAnswer отличается от эталонного ответа
	}

	userAnswer = prompt("СКОЛЬКО СЕРДЕЦ У ОСЬМИНОГА?"); //специальной переменной (var userAnswer =), которая будет хронить ответ, который ввёл пользователь (через команду prompt) присваивается новое значение
	userAnswer = userAnswer.toLowerCase();
	if(userAnswer == "четыре" || userAnswer == "4" ){
// задаём условие: сравниваем ответ пользователя (который находится в переменной userAnswer) с эталонным ответом (userAnswer == "четыре") и (userAnswer == "4"), используем логический оператор ИЛИ. то есть если ответ пользователя равен == эталонному ответу (четыре) или (4), то мы выводим на экран сообщение - "Праывльно! Возьми с полки пиражок!"
		alert("Праывльно! Возьми с полки пиражок!");
		score++; //к переменной подсчитывающей правильные ответы прибавляется 1, если ответ пользователя совпадает с эталонным ответом
	} else {
		alert("Не угадал!");
// при неправильном ответе команда score++ не выполняется т.к счёт ведётся только правильных ответов, а только выводится сообщение "Не угадал!"
	}
	userAnswer = prompt("Кто президент России?");
	userAnswer = userAnswer.toLowerCase();
	if(userAnswer == "путин"){
		alert("Праывльно! Возьми с полки пиражок!");
		score++;
	} else {
		alert("Не угадал!");
	}
	alert("У вас " + score + " правильных ответов ") // выводим на экран сообщение, которое указывает число правильных ответов

</script>


<meta charset="utf-8">
<script type="text/javascript">
/*Пользователь вводит сумму вклада и процент, который будет начисляться ежегодно. Отобразить размер вклада поочередно на ближайшие 5 лет.*/

// сверху стандартное начало для любой программы в среде разработки javascript. <meta charset="utf-8"> - указываем кодировку для корректного прочтения и отображения русских символов и <script type="text/javascript"> - тэг открытия программы.
	var totalsum = +prompt("Введите сумму, которую вы хотите инвистировать в рублях");
	// создаём переменную  totalsum  которой присваиваем значение, которое введёт пользователь (prompt). + перед prompt означает, что тип данных будет числовой. В эту переменную пользователь вводит сумму, которую он хочет положить на вклад.
	var percent = +prompt("Введите сколько процентов годовых вы хотите получать");
	// создаём переменную percent, которой присвоится числовое значение которое введёт пользователь (+prompt), эта переменная отоброжает проценты годовых по вкладу, которые будут начисяться банком.
	var percent1year = (totalsum * percent / 100);
	// задаём переменную, которой присвоим значение подсчитанное исходя из введёных пользователем данных. Это значение процентов, которые зачислятся за первый год (percent ) на сумму вклада (totalsum)
	var totalsum1year = totalsum + percent1year
	// задаём переменную и присваиваем ей значение: к сумме вклада прибавляем проценты, которые будут начислены за первый год. Таким образом мы подсчитаем сумму которая будет у пользователя после первого года с учётом процентов.
	var percent2year = (totalsum1year * percent / 100);
	// задаём переменную в которой подсчитываем проценты за 2 ой год
	var totalsum2year = totalsum1year + percent2year
	// задаём переменную в которой подсчитываем сумму на счёте после 2 ух лет начисления прцентов
	var percent3year = (totalsum2year * percent / 100);
	// новая переменная с подсчётом процентов за третий год
	var totalsum3year = totalsum2year + percent3year
	// переменная с подсчётом суммы после трёх лет вклада с учётом процентов 
	var percent4year = (totalsum3year * percent / 100);
	// переменная с подсчётом процентов за 4 ый год
	var totalsum4year = totalsum3year + percent4year
	// переменная с подсчётом общей суммы с учётом процентов за 4 ый год
	var percent5year = (totalsum4year * percent / 100);
	// переменная с процентами за пятый год
	var totalsum5year = totalsum4year + percent5year
	// переменная с общей сумммой за 5 лет включая все проценты

	alert("Ваш вклад " + totalsum.toFixed(2) + " Рублей под " + percent.toFixed(2) + " процентов годовых: \n " + " \n" + "Первый год ваша прибыль составит " + percent1year.toFixed(2) + " рублей " + "ваша сумма на вкладе составит "  + totalsum1year.toFixed(2) + " рублей \n" + "Второй год ваша прибыль составит " + percent2year.toFixed(2) + " рублей " + "ваша сумма на вкладе составит "  + totalsum2year.toFixed(2) + " рублей \n" + "Третий год ваша прибыль составит " + percent3year.toFixed(2) + " рублей " + "ваша сумма на вкладе составит "  + totalsum3year.toFixed(2) + " рублей \n" + "четвёртый год ваша прибыль составит " + percent4year.toFixed(2) + " рублей " + "ваша сумма на вкладе составит "  + totalsum4year.toFixed(2) + " рублей \n" + "Пятый год ваша прибыль составит " + percent5year.toFixed(2) + " рублей " + "ваша сумма на вкладе составит "  + totalsum5year.toFixed(2) + " рублей \n");
	// команда вывода на экран. мы склеиваем много строк, используя + . текстовая информация в ковычках "..." выводится как текст, имена переменных без ковычек выводятся значения этих переменных. (имя_переменной.toFixed(2)) - означает, что отображаем 2 знака после запятой.  \n - означает переход на новую строку. Команда вывода выглядит массивной и грамозской.


</script>


<meta charset="utf-8">
<script type="text/javascript">
/*Пользователь вводит сумму вклада и процент, который будет начисляться ежегодно. Отобразить размер вклада поочередно на ближайшие 5 лет.*/
	var summ = +prompt('Введите сумму вклада: '); 
	// задаём переменную summ и запрашиваем у пользователя ввести мумму вклада, присваивая значение переменной summ
	var percent = +prompt('Введите процент для начисления: ');
	// задаём переменную percent и присваиваем ей значение, которое введёт пользователь
	percent = percent / 100;
	// для переменной percent присваиваем новое значение. значение введёное пользователем делим на 100.

	var result = 'Изменение размера вклада по годам: \n';
	// задаём переменную result в которой мы будем хронить строку, которую нужно вывести на экран
	for(var i = 1; i <= 5; i++ ) {
		summ = summ + (summ * percent);
		// Соответственно мы в цикле вычисляем сумму вклада за каждый следующий год. От 1 до 5 . и подсчитав текущее значение summ увеличиваем строчку result
		result += i + " год: " + summ.toFixed(2) + " рублей \n";
		// Переменная result сначала просто равняется вступительному слову, далее мы вычисляем сумму вклада на первый год и к переменной result прибавляем сумму вклада за первый год, далее вычисляем за второй год, и также к result прибавляем эту информацию. Постепенно в переменной result начинает хрониться информация за все 5 лет и мы выводим это значение на экран.
	}

	alert(result);

</script>


<meta charset="utf-8">
<script type="text/javascript">
// Программа по поиску максимума 2 ух чисел

	var a = +prompt("Введите первое число");
	var b = +prompt("Введите первое число");
	// Вводим 2 переменные a, b , которые введёт пользователь . запрашиваем пользователя Ввести 2 числа (команда prompt). + перед +prompt говорит о том что тип данных числовой, а не строковый.
	if(a > b){ // задаём условие - if = Если переменная a больше b 
		var max = a; // в фигурных скобках пишем условие: мы создаём переменную max которой присваивается значение a
	} else { // иначе = else  , и в фигурных скобках прописываем условие для иначе
		max = b; // переменной max присваивается значение b
	}

	alert(max); // выводим на экран значение переменной max - что и будет наибольшим числом

	/*Если мы хотим чтобы при равенстве чисел программа нам писала об этом, участок кода будет выглядить следующим образом:

	if(a > b){ 
		var max = a; 
	} else if(a == b){  // Добавляем ещё одно условие else if . т.е если числа равны (a == b) мы выводим сообщение о том, что числа равны если и это цсловие ложно то программа идёт дальше - присваиваем переменной max = b 
		alert("Числа равны")
	} else { 
		max = b; 
	}
    */
    /*Ещё один вариант программы 
var a = +prompt("Введите первое число");
var b = +prompt("Введите первое число");
var max = a; // мы сразу предполагаем что а - это максимальное число.
if(a < b){
	max = b; // если значение а меньше b , то в переменную мах мы записываем число b
}
alert(max);
  */
}

</script>


<meta charset="utf-8">
<script type="text/javascript">
// пограмма должна подсчитать сумму чисел от 1 до n и выполнить проверку на корректность введённых пользователем данных

		/*
var n = +prompt("Пожалуйста, введите число"); 
	// запрашиваем пользователя ввести число, создаём переменную n
for (var i = 0; i <= n; i++){ 
	document.write(i)
}
	// для переменной i которая изначально = 0 и является счётчиком. для всех i меньших или равных n / мы выводим на экран значение i       (document.write(i)), каждый раз прибавляя к этой переменной 1 (i++) пока i не будет равна n.
		*/
	var n = +prompt("Пожалуйста, введите число"); // запрашиваем пользователя ввести число, создаём переменную n

	/*while(isNaN(n) || n < 0){
		 n = +prompt("Пожалуйста, введите число");
	
	// Пока n не является числом или меньше 0 мы просим пользователя снова ввести число, когда число будетт введено верно, мы идём дальше и выполняем условие. Ниже закомментирован вариант с выводом пользователю сообщений, если он ввёл не число или отрицательное число
	*/
	if(isNaN(n)){
		document.write("Нужно было ввести число")
// Если пользователь ввёл не число, а текст (isNan(Not a Mumber = NaN)) мы выводим на экран сообщение = {document.write("Нужно было ввести число")}	 Проходим первую проверку - если Ложно, приступаем ко второй проверке ...	
	} else if (n < 0){
		document.write("Нужно было ввести положительное число")
// Если пользователь ввёл отрицательное число, мы выводим на экран сообщение = {document.write("Нужно было ввести положительное число")}	Проводим вторую проверку, если ложно выполняем условия следующей команды else
// более короткая запись условий используя логические операции : if(isNan(n) || n < 0) - если n не число ИЛИ n < 0

	} else { 
		var sum = 0; // создаём переменную , которая изначально равна 0 и в кторую мы будем подсчитывать значение суммы всех чисел от 0 до n
		for (var i = 0; i <= n; i++){ 
		sum += i; // каждый раз к переменной sum мы прибавляем значение i. Запись равнозначна (sum = sum + i) таким образом мы подсчитываем сумму всех элеменотов.
		document.write(i + " " + sum + "<br/>" ); // выводим на экран значение переменной i и сумму 
		}
	}

</script>


<meta charset="utf-8">
<script type="text/javascript">
// пограмма должна подсчитать сумму чисел от 1 до n и выполнить проверку на корректность введённых пользователем данных

	do{
		var n = +prompt("Пожалуйста, введите число");
	} while(isNaN(n) || n < 0)
// Сделать то, что написано внутри тела цикла {...} в фигурных скобках, до тех пор пока выполняется выражение которое находится внутри while между скобочками (...) т. е пока переменная n является не числом NaN или меньше 0, будет отрабатывать команда:  var n = +prompt("Пожалуйста, введите число");
	var sum = 0; 
		for (var i = 0; i <= n; i++){ 
		sum += i;
		document.write(i + " " + sum + "<br/>" ); 
		}


</script>


<meta charset="utf-8">
<script type="text/javascript">
// Компьютер загадывает число от 0 до 100. Пользователь должен угадать это число. У него есть ограниченное число попыток. Также компьютер будет давать подсказки пользователю если тот ввёл слишком большое или слишком маленькое число.
	var answer = parseInt(Math.random() * 100); 
// создадим переменную answer, которая будет хронить правильный ответ. В эту переменную при старте программы компьютер должен положить какое то случайное число. В этом нам поможет команда - Math.random(). т. к эта команда загадывает случайное число от 0 до 1, а нам нужно число от 0 до 100, поэтому эту переменную мы сразу умножаем на 100: Math.random() * 100; а с помощью команды parseInt() мы отбрасываем дробную часть.
	var userAnswer = +prompt("Угадайте число от 1 до 100");
// создаём переменную userAnswer, которая будет хронить ответ пользователя,с помощью команды prompt запросим у него ввести число, + перед prompt - числовой тип данных.
	var maxTryCount = 7
// создаём переменную, которая будет содержать число попыток.
	for(var tryCount = 1; tryCount <= maxTryCount; tryCount++){
		if(userAnswer == answer){
			alert("Поздравляем! Вы угадали!");
			break;
		} else if(userAnswer > answer) {
			alert("Вы ввели слишком большое число");
		} else if(userAnswer < answer) {
			alert("Вы ввели слишком маленькое число");
		}
// задаём цикл - для переменной tryCount, которая изначально равна 1, мы каждый раз будем прибавлять единицу (tryCount++), пока она не станет равной переменной maxTryCount (в нашем случае 7) программа будет выполнять следующие действия: 
// если переменная userAnswer будет совпадать с переменной, которую введёт пользователь answer (userAnswer > answer), команда выполняет действие - выводит сообщение "Поздравляем! Вы угадали!". А затем выполняется команда break - выход из цикла. В фигурных скобках - то что выполняет программа.
// Если верхнее условие не выполняется и ложно программа идёт на следующую проверку: else if в скобках условие (userAnswer > answer) переменная userAnswer больше переменной answer, выполняется следующее действие: выводим на экран сообщение {alert("Вы ввели слишком большое число")}. Если это условие ложно, то програма идёт на следующую проверку:
// else if(userAnswer < answer) - если переменная  переменная userAnswer меньше переменной answer, мы выводим соответствующее сообщение {alert("Вы ввели слишком маленькое число");}
		userAnswer = +prompt("У вас осталось " + (maxTryCount - tryCount) + " попыток \n" + "Угадайте число от 1 до 100");
	}
// После проверки всех трёх условий, если пользователь не угадал число, т.е первое условие не было истинным, мы переменной userAnswer присваиваем новое значение, которое просим ввести пользователя. При этом при запросе на ввод мы выводим сообщение в котором указываем число оставшихся попыток, которое высчитываем по формуле (maxTryCount - tryCount), причём действие в скобках выполняется первым у него приоритет.  \n - с помощью этой команды мы переходим на новую строку, где выводится сообщение - "Угадайте число от 1 до 100"
	alert("Правильный ответ: " + answer );
// После того, как переменные станут равны (tryCount = maxTryCount) число попыток заканчивается, мы выходим из цикла и выполняется последняя команда - выводится сообщение с правильным ответом. alert("Правильный ответ: " + answer );
</script>


<meta charset="utf-8">
<script type="text/javascript">
// Компьютер загадывает число от 0 до 100. Пользователь должен угадать это число. Также компьютер будет давать подсказки пользователю если тот ввёл слишком большое или слишком маленькое число. Сделать игру с двумя игроками и бесконечным числом попыток. Сделайте возможность выйти из игры по желанию одного из игроков.
	var answer = parseInt(Math.random() * 100); 
// создадим переменную answer, которая будет хронить правильный ответ. В эту переменную при старте программы компьютер должен положить какое то случайное число. В этом нам поможет команда - Math.random(). т. к эта команда загадывает случайное число от 0 до 1, а нам нужно число от 0 до 100, поэтому эту переменную мы сразу умножаем на 100: Math.random() * 100; а с помощью команды parseInt() мы отбрасываем дробную часть.
	var playerNumber = 1;
// создадим переменную которая будет обозначать какой игрок ходит. Изначально она равна 1 и это значит, что ходит первый игрок.

	while(true){
// создаём цикл while для бесконечного числа попыток и присваиваем ему значение true - ВЕРНО. Внутри цикла помещаем условия выхода из цикла: при нажатии q и когда кто то из игроков угадает число. команда выхода из цикла break.
		var userAnswer = prompt("Угадайте число от 1 до 100 \n" + playerNumber +  " ИГРОК ХОДИТ \n" + "для выхода нажмите q" );
// создаём переменную userAnswer, которая будет хронить ответ пользователя, с помощью команды prompt запросим у него ввести число. Также мы отображаем какой игрок делает ход (+ playerNumber +  " ИГРОК ХОДИТ \n") и пишем какую клавишу надо нажать для выхода из цикла ("для выхода нажмите q" ) . Далее в фигурных скобках идут команды цикла {...}. обратим внимание что перед prompt нету + , то есть изначально возможно ввести строковую информацию, это необходимо т.к для выхода из программы мы используем "q"
		if(userAnswer == "q")
			break;
// Первая проверка: если (userAnswer == "q") пользователь ввёл символ q, программа выполняет команду break; и происходит выход из программы. также после скобок if НЕ ставится точка с запятой.
		userAnswer = parseInt(userAnswer);
// далее командой userAnswer = parseInt(userAnswer); присваиваем переменной userAnswer числовое значение.
		if(userAnswer == answer){
			alert("Поздравляем! Вы угадали! Победил игрок " + playerNumber);
			break;
// Когда первая проверка оказывается ложной (пользователь не нажал q для выхода), происходит следующая проверка: if(userAnswer == answer) услорвие в круглых скобках , если переменная userAnswer совпадает с переменной answer, мы выводим на экран сообщение о победе: ("Поздравляем! Вы угадали! Победил игрок " + playerNumber) и также прикрепляем к строке номер победившего игрока. + playerNumber. Также после сообщения о победе выполняется команда break; и мы выходим из цикла.
		} else if(userAnswer > answer) {
			alert("Вы ввели слишком большое число");
// Если верхнее условие оказалось ложным, выполняется следующая проверка:  else if в скобках условие (userAnswer > answer) переменная userAnswer больше переменной answer, выполняется следующее действие: выводим на экран сообщение {alert("Вы ввели слишком большое число")}. Если это условие ложно, то програма идёт на следующую проверку:
		} else if(userAnswer < answer) {
			alert("Вы ввели слишком маленькое число");
// Если верхнее условие оказалось ложным, выполняется следующая проверка: else if(userAnswer < answer) - если переменная  userAnswer меньше переменной answer, мы выводим соответствующее сообщение {alert("Вы ввели слишком маленькое число");}
		}

		if(playerNumber == 1)
			playerNumber = 2;
		else 
			playerNumber = 1;
// После прохождения трёх проверок и пользователь не угадал число, ему выводится сообщение о том что введённое им число больше или меньше, программа выполняет следующую проверку: Если переменная счётчик игрока (playerNumber == 1) playerNumber равняется единице, то после прохождения проверок она становится равной 2 т.е ходит второй игрок. в противном случае (если не равна 1) она становится равной 1. С помощью этих проврок мы определяем чей сейчас ход, какой игрок ходит. 
	}

	alert("Правильный ответ: " + answer );
// После выхода из цикла и вывода сообщения о победе одного из игроков появляется сообщение, которое показывает правильный ответ: alert("Правильный ответ: " + answer );
</script>


<meta charset="utf-8">
<script type="text/javascript">
// Программа загадывает случайные числа, выводит их на экран и предлагает пользователю запомнить их. Затем пользователь программы должен вспомнить первое число, последнее число и число с произвольным порядковым номером.	
	var numbers = [34, 56, 87, 90, 67];
// Создаём переменную numbers в которую помещаем массив из 5 элементов. Элементы вводим самостоятельно через запятую и пробел после запятой. Элементы массива помещаются в квадратные скобки. 
	alert("Запомните числа и их порядок: " + numbers);
// Выводим на экран сообщение "Запомните числа и их порядок: " и через + прибавляем строку с массивом. В итоге нам выведут на экран сообщение и массив из 5 чисел. Когда мы указываем переменную содержащую массив, выводятся все элементы массива.
	var userAnswer = +prompt("Каким было первое число? ");
// Создаём переменную userAnswer и запрашиваем у пользователя ввести число - первый элемент массива. Сразу сконвертируем его в целое число с помощью + перед командой prompt и присвоим переменной userAnswer это значение, которое ввёл пользователь.
	if(userAnswer == numbers[0]){
		alert("Это правильный ответ! ");
	} else {
		alert("Ошибка! Правильный ответ " + numbers[0]);
	}
// Пользуемся командой if - если . Если в круглых скобках условие (переменная введённая пользователем userAnswer совпадает с первым элементом массива ) (userAnswer == numbers[0]), для обращения к первому элементу массива, мы пишем имя массива и в квадратных скобках обращаемся к элементу массива. т.к. в массивах отсчёт начинается с нуля, то первый элемент массива имеет порядковый номер 0. numbers[0]. Затем в фигурных скобках {...} пишем команды, которые будут выполняться, если условие в круглых скобках (userAnswer == numbers[0]) окажится ВЕРНЫМ. : Если (ответ пользователя совпадает с первым элементом массива) мы выводим сообщение {alert("Это правильный ответ! ")}. Если условие оказывается ЛОЖНЫМ, мы переходим к команде else - иначе. И выполняем условие относящееся к команде иначе, т.е выводим на экран сообщение "Ошибка! Правильный ответ "  и прибавляем к этой строке оператором + значение первого элемента массива numbers[0].
	userAnswer = +prompt("Каким было последнее число? ");
// Теперь переменной userAnswer мы присваиваем новое значение, которое введёт пользователь. Запрашиваем пользователя ввести число  +prompt("Каким было последнее число? ")
	if(userAnswer == numbers[ numbers.length - 1 ]){
		alert("Это правильный ответ! ");
	} else {
		alert("Ошибка! Правильный ответ: " + numbers[ numbers.length - 1 ]);
	}
// Аналогично предидущей проверке: Если выполняется условие в круглых скобках if(userAnswer == numbers[numbers.lenght - 1]). т.е переменная введённая пользователем userAnswer совпадает с последним элементом массива, программа выдаёт сообщение "Это правильный ответ! " ДЛЯ ТОГО ЧТОБЫ ОБРАТИТЬСЯ К ПОСЛЕДНЕМУ ЭЛЕМЕНТУ МАССИВА мы воспользуемся командой numbers.lenght - которая показывает длину массива. То есть в массиве numbers мы обращаемся к элементу в квадратных скобках numbers[numbers.lenght - 1] длина массива - 1 т.к отчёт начинается с нулевого элемента. в нашем случае длина массива 5 символов и мы обращаемся к элементу чей порядковый номер 4, а т.к отсчёт ведётся с нуля, То это ПЯТЫЙ элемент массива или последний. 0.1.2.3.4. = 5 элементов. После прохождения первой проверки, если условие оказывается Ложным, мы переходим ко 2 ой проверке: else {alert "Ошибка! Правильный ответ " + numbers[numbers.lenght - 1])} иначе выводим сообщение "Ошибка! Правильный ответ " и выводим правильный ответ - значение последнего элемента массива: numbers[numbers.lenght - 1]
 	var n = parseInt(Math.random() * numbers.length);
 // Создаём переменную n , для которой генерируем случайное число от 0 до 4 - это порядковый номер элемента массива. присваиваем числовое значение переменной с помощью команды  parseInt(), с помощью команды Math.random() мы генерируем случайное число. сгенерируется число от 0 до 1 - дробное число. с помощью команды parseInt() избавляемся от дробной части. а чтобы это число было от 0 до 4 ёх мы умножаем его на длину массива, которую получим с помощью команды numbers.lenght
	userAnswer = +prompt("Каким было число с порядковым номером  " + (n + 1) + "?" ); 
// Теперь переменной userAnswer мы присваиваем новое значение, которое введёт пользователь. Запрашиваем пользователя ввести число  +prompt("Каким было число с порядковым номером  " + (n + 1) + "?" ). (n + 1) - пользователь будет считать элементы не с 0, а с 1 поэтому чтобы не путать его и порядковый номер совпадал с положением элемента массива мы к индексу элемента n прибавляем 1
	if(userAnswer == numbers[ n ]){
		alert("Это правильный ответ! ");
	} else {
		alert("Ошибка! Правильный ответ " + numbers[ n ]);
	}
// Далее мы проверяем условие : if(userAnswer == numbers[ n ]) Если переменная введённая пользователем совпадает с элементом маассива порядкового номера n , мы выводим сообщение {alert("Это правильный ответ! ")}; если ответ не совпадает мы выполняем условие else, которое находится в фигурных скобках {alert("Ошибка! Правильный ответ " + numbers[n])}; т.е выводим на экран сообщение "Ошибка! Правильный ответ " и пишем правильный ответ numbers[n].
</script>


<meta charset="utf-8">
<script type="text/javascript">
// Программа загадывает случайные числа, выводит их на экран и предлагает пользователю запомнить их. Затем пользователь программы должен вспомнить первое число, последнее число и число с произвольным порядковым номером.	
	var numbers = [];
// Создаём переменную numbers которая изначально пустой массив, в которой мы в дальнейшем добавим x случайных сгенерированный чисел.
	var x = 7;
// создаём переменную x которой присваиваем значение числа элементов массива. То есть в массив мы добавим х элементов, в нашем случае 7
	for(var i = 0; i <= x; i++){
		var randomNumber = parseInt(Math.random() * 100);
		numbers.push(randomNumber);
	}
// Создаём цикл: для специальной переменной i которая является счётчиком и изначально равна 0, мы будем прибавлять единицу 	i++, пока эта переменная не станет равной х. (i <= x ). Пока переменная меньше или равна х выполняется условие цикла в фигурных скобках, как только переменная i станет больше чем переменная х , мы выходим из цикла и идем дальше по программе.
// Тело цикла, содержащееся в фигурных скобках - мы создаём переменную var randomNumber, которой присваиваем значение случайно сгенерированного числа командой Math.random(). т.к число генерируется от 0 до 1, мы умножаем его на 100 (Math.random() * 100) затем командой parseInt мы избавляемся от дробной части, обозначая сгенерированное число как тип данных числовое. parseInt(Math.random() * 100) таким образом переменной randomNumber присваивается случайное целое число. Затем с помощью команды numbers.push(randomNumber) мы в наш пустой массив добавляем сгенерированное число и так произходит х раз, пока мы не выйдем из цикла. при выходе из цикла наш созданный ранее пустой массив numbers = [] будет содержать х сгенерированных элементов.
	alert("Запомните числа и их порядок: " + numbers);
// Выводим на экран сообщение "Запомните числа и их порядок: " и через + прибавляем строку с массивом. В итоге нам выведут на экран сообщение и массив из х чисел. Когда мы указываем переменную содержащую массив, выводятся все элементы массива.
	var userAnswer = +prompt("Каким было первое число? ");
// Создаём переменную userAnswer и запрашиваем у пользователя ввести число - первый элемент массива. Сразу сконвертируем его в целое число с помощью + перед командой prompt и присвоим переменной userAnswer это значение, которое ввёл пользователь.
	if(userAnswer == numbers[0]){
		alert("Это правильный ответ! ");
	} else {
		alert("Ошибка! Правильный ответ " + numbers[0]);
	}
// Пользуемся командой if - если . Если в круглых скобках условие (переменная введённая пользователем userAnswer совпадает с первым элементом массива ) (userAnswer == numbers[0]), для обращения к первому элементу массива, мы пишем имя массива и в квадратных скобках обращаемся к элементу массива. т.к. в массивах отсчёт начинается с нуля, то первый элемент массива имеет порядковый номер 0. numbers[0]. Затем в фигурных скобках {...} пишем команды, которые будут выполняться, если условие в круглых скобках (userAnswer == numbers[0]) окажится ВЕРНЫМ. : Если (ответ пользователя совпадает с первым элементом массива) мы выводим сообщение {alert("Это правильный ответ! ")}. Если условие оказывается ЛОЖНЫМ, мы переходим к команде else - иначе. И выполняем условие относящееся к команде иначе, т.е выводим на экран сообщение "Ошибка! Правильный ответ "  и прибавляем к этой строке оператором + значение первого элемента массива numbers[0].
	userAnswer = +prompt("Каким было последнее число? ");
// Теперь переменной userAnswer мы присваиваем новое значение, которое введёт пользователь. Запрашиваем пользователя ввести число  +prompt("Каким было последнее число? ")
	if(userAnswer == numbers[ numbers.length - 1 ]){
		alert("Это правильный ответ! ");
	} else {
		alert("Ошибка! Правильный ответ: " + numbers[ numbers.length - 1 ]);
	}
// Аналогично предидущей проверке: Если выполняется условие в круглых скобках if(userAnswer == numbers[numbers.lenght - 1]). т.е переменная введённая пользователем userAnswer совпадает с последним элементом массива, программа выдаёт сообщение "Это правильный ответ! " ДЛЯ ТОГО ЧТОБЫ ОБРАТИТЬСЯ К ПОСЛЕДНЕМУ ЭЛЕМЕНТУ МАССИВА мы воспользуемся командой numbers.lenght - которая показывает длину массива. То есть в массиве numbers мы обращаемся к элементу в квадратных скобках numbers[numbers.lenght - 1] длина массива - 1 т.к отчёт начинается с нулевого элемента. в нашем случае длина массива х символов и мы обращаемся к элементу чей порядковый номер х -1, а т.к отсчёт ведётся с нуля, То это х элемент массива или последний. 0.1.2.3.4... = x элементов. После прохождения первой проверки, если условие оказывается Ложным, мы переходим ко 2 ой проверке: else {alert "Ошибка! Правильный ответ " + numbers[numbers.lenght - 1])} иначе выводим сообщение "Ошибка! Правильный ответ " и выводим правильный ответ - значение последнего элемента массива: numbers[numbers.lenght - 1]
 	var n = parseInt(Math.random() * numbers.length);
 // Создаём переменную n , для которой генерируем случайное число от 0 до 4 - это порядковый номер элемента массива. присваиваем числовое значение переменной с помощью команды  parseInt(), с помощью команды Math.random() мы генерируем случайное число. сгенерируется число от 0 до 1 - дробное число. с помощью команды parseInt() избавляемся от дробной части. а чтобы это число было от 0 до 4 ёх мы умножаем его на длину массива, которую получим с помощью команды numbers.lenght
	userAnswer = +prompt("Каким было число с порядковым номером  " + (n + 1) + "?" ); 
// Теперь переменной userAnswer мы присваиваем новое значение, которое введёт пользователь. Запрашиваем пользователя ввести число  +prompt("Каким было число с порядковым номером  " + (n + 1) + "?" ). (n + 1) - пользователь будет считать элементы не с 0, а с 1 поэтому чтобы не путать его и порядковый номер совпадал с положением элемента массива мы к индексу элемента n прибавляем 1
	if(userAnswer == numbers[ n ]){
		alert("Это правильный ответ! ");
	} else {
		alert("Ошибка! Правильный ответ " + numbers[ n ]);
	}
// Далее мы проверяем условие : if(userAnswer == numbers[ n ]) Если переменная введённая пользователем совпадает с элементом маассива порядкового номера n , мы выводим сообщение {alert("Это правильный ответ! ")}; если ответ не совпадает мы выполняем условие else, которое находится в фигурных скобках {alert("Ошибка! Правильный ответ " + numbers[n])}; т.е выводим на экран сообщение "Ошибка! Правильный ответ " и пишем правильный ответ numbers[n].
</script>


<meta charset="utf-8">
<script type="text/javascript">
// Пользователю будут предлагатья английские слова и он должен вспомнить их перевод. Если пользователь вспомнил неправильно, ему будет показан правильный перевод. Если пользователь вспомнил перевод и ввёл его правильно, это слово ему больше показываться не будет.
	var words = [
		["issues", "вопросы"],
		["attached", "прикрепленный"],
		["edit", "редактировать"],
		["merge", "поглощать"],
		["conversation", "разговор"],
	];
// создадим многомерный массив. т. е массив элементами которого также являются массивы. Создали массив words, внутри которого содержатся ещё 5 массивов, каждый из которых содержит 2 элемента - английское слово и его перевод на русский язык.
// для обращение к элементам массива... words[0] - мы обращаемся к первому элементу массива, которым также является массив ["issues", "вопросы"]. words[4] - обращаемся к 5 ому элементу массива ["conversation", "разговор"]. words[3][0] обращаемся к 4 ому элементу массива, а в нём к первому элементу. 4 ого массива т. е вызываем элемент "merge"... words[1][1] - "прикрепленный"
	while(words.length != 0){
// Создаём цикл. Пока длина массива не равна нулю цикл выполняется, как только длина массива words.length станет равной 0 , выйдим из цикла. При каждом правильном ответе мы из массива убираем угаданную пару слов, пока длина массива в итоге не станет равной 0, т е. мы угодали все слова.
		var randEngWord = parseInt(Math.random() * words.length);
// создаём переменную randEngWord которой присваиваем случайное значение, которое мы задаём командой Math.random(). умножаем это значение на длину массива words, которую мы вычислим с помощью команды имя_массива.length : (Math.random() * words.length). Чтобы избавиться от дробной части обозначаем тип переменной как числовой с помощью команды parseInt(): parseInt(Math.random() * words.length). т.к наш массив состоит из 5 элементов - мы получим случайное число от 0 до 4 и переменной randEngWord присовится это случайное значение.
		var userTranslete = prompt("Как переводится слово: " + words[randEngWord][0] );
// создаём переменную userTranslete, которая будет содержать ответ пользователя и просим его ввести перевод слова, которое ему будет показано и которое содержится в одном из 5 массивов. командой prompt мы просим пользователя ввести перевод слова, далее мы обращаемся к массиву к элементу который будет содержаться в переменной randEngWord (от 0 до 4 ёх). Обратившись к элементу массива, который также является массивом из 2 ух слов, мы обращаемся к первому элементу вложенного массива [0]. т. е к английскому слову. words[randEngWord][0] таким образом в запросе пользователю на ввод данных будет содержаться фраза например prompt("Как переводится слово: " + words[2][0] ) (Как переводится слово: edit ?) 
		if(userTranslete == words[randEngWord][1]){
			alert("Это правильный ответ! ");
			words.splice(randEngWord, 1);
// Далее мы сравниваем ответ пользователя, который находится в переменной userTranslete со вторым элементом строки массива words[randEngWord][1], где 2 ой элемент это перевод первого элемента на русский язык. Если перевод верный мы выводим соответствующее сообщение alert("Это правильный ответ! "); и выполняем команду words.splice(randEngWord, 1); - эта команда удалит угаданное слово т. е удалит элемент массива randEngWord - случайно сгенерированный ранее. в скобках указываем, что нам нужно удалить randEngWord элемент, 1 означает, что с randEngWord элемента мы хотим удалить 1 элемент. words.splice(randEngWord, 1). т.е мы удаляем элемент массива, который является массивом из пары слов, которые угадал пользовател. После удаления из массива одного элемента у нас изменяется длина массива - words.length и так пока мы не угадаем все слова.
		} else {
			alert("Вы не угадали. Правильный ответ: " + words[randEngWord][1]);
// Если пользователь не угадал, мы выводим сообщение "Вы не угадали. Правильный ответ: " и выводим правильное слово, которым является второй элемент массива. т.к наш массив состоит из  массивов, которые в свою очередь состоят из английского слова - первый элемент масива[0] и из перевода этого слова - второй элемент массива [1].
		}
	}
	alert("Поздравляем вы угадали все слова!");
// после выхода из цикла, когда угадали все слова выводим финальное сообщение.	
</script>


<meta charset="utf-8">
<script type="text/javascript">

	function sayHallo(name, surname){
		alert("Приветствую тебя " + name + surname)
	}
// Задаём функцию  с помощью команды function, имя функции sayHallo, для дальнейшего обращения к функции будем просто вводить её имя. В скобках будем указывать параметры функции - переменные, которые работают внутри функции. Если переменных несколько, они указываются через запятую. В фигурных скобках записываем код, который будет выполняться каждый раз, когда мы обращаемся к функции. в нашем случае, каждый раз когда вызываем функцию выполняется код: alert("Приветствую тебя " + name ). переменная name - параметр функции , переменная которая действует только внутри функции.
	sayHallo("Юрген")
// Мы вызываем функцию sayHallo, параметру name присваиваем "Юрген" и таким образом мы запускаем команду alert("Приветствую тебя " + name), и на выходе получим вывод сообщения: "Приветствую тебя Юрген
	sayHallo("Танечка, Иванова")
// Мы вызываем функцию sayHallo, параметру name присваиваем "Танечка", параметру surname присваиваем "Иванова"  и таким образом мы запускаем команду alert("Приветствую тебя " + name + surname), и на выходе получим вывод сообщения: "Приветствую тебя Танечка Иванова"
</script>	


<meta charset="utf-8">
<script type="text/javascript">
// Пользователю будут предлагатья английские слова и он должен вспомнить их перевод. Если пользователь вспомнил неправильно, ему будет показан правильный перевод. Если пользователь вспомнил перевод и ввёл его правильно, это слово ему больше показываться не будет.

	function askForWords(words){
		while(words.length != 0){
			var randEngWord = parseInt(Math.random() * words.length);
			var userTranslete = prompt("Как переводится слово: " + words[randEngWord][0] );
			if(userTranslete == words[randEngWord][1]){
				alert("Это правильный ответ! ");
				words.splice(randEngWord, 1);
				} else {
					alert("Вы не угадали. Правильный ответ: " + words[randEngWord][1]);
				}
			}	
		}
// Создаём функцию с помощью команды function. даём имя этой функции с помощью которого будем в дальнейшем к ней обращаться: askForWords. В скобках указываем параметр функции - переменная (words), которая будет принимать значение многомерных массивов. function askForWords(words){...} В фигурных скобках идёт последовательность команд этой функции.
// {команды функции: // while(words.length != 0) - Создаём цикл. Пока длина массива не равна нулю цикл выполняется, как только длина массива words.length станет равной 0 , выйдим из цикла. При каждом правильном ответе мы из массива убираем угаданную пару слов, пока длина массива в итоге не станет равной 0, т е. мы угодали все слова. Далее в фигурных скобках условия цикла while {..} НЕ ЗАБЫВАЕМ ПРО ТАБУЛЯЦИЮ ДЛЯ ЛУЧШЕГО ЧТЕНИЯ КОДА}
// { цикл while: создаём переменную randEngWord которой присваиваем случайное значение, которое мы задаём командой Math.random(). умножаем это значение на длину массива words, которую мы вычислим с помощью команды имя_массива.length : (Math.random() * words.length). Чтобы избавиться от дробной части обозначаем тип переменной как числовой с помощью команды parseInt(): parseInt(Math.random() * words.length). т.к наш массив состоит из 5 элементов - мы получим случайное число от 0 до 4 и переменной randEngWord присовится это случайное значение... -> ...создаём переменную userTranslete, которая будет содержать ответ пользователя и просим его ввести перевод слова, которое ему будет показано и которое содержится в одном из 5 массивов. командой prompt мы просим пользователя ввести перевод слова, далее мы обращаемся к массиву к элементу который будет содержаться в переменной randEngWord (от 0 до 4 ёх). Обратившись к элементу массива, который также является массивом из 2 ух слов, мы обращаемся к первому элементу вложенного массива [0]. т. е к английскому слову. words[randEngWord][0] таким образом в запросе пользователю на ввод данных будет содержаться фраза например prompt("Как переводится слово: " + words[2][0] ) (Как переводится слово: edit ?) ... }
// if(userTranslete == words[randEngWord][1]{alert("Это правильный ответ! ");words.splice(randEngWord, 1);}   Далее мы сравниваем ответ пользователя, который находится в переменной userTranslete со вторым элементом строки массива words[randEngWord][1], где 2 ой элемент это перевод первого элемента на русский язык. Если перевод верный мы выводим соответствующее сообщение alert("Это правильный ответ! "); и выполняем команду words.splice(randEngWord, 1); - эта команда удалит угаданное слово т. е удалит элемент массива randEngWord - случайно сгенерированный ранее. в скобках указываем, что нам нужно удалить randEngWord элемент, 1 означает, что с randEngWord элемента мы хотим удалить 1 элемент. words.splice(randEngWord, 1). т.е мы удаляем элемент массива, который является массивом из пары слов, которые угадал пользовател. После удаления из массива одного элемента у нас изменяется длина массива - words.length и так пока мы не угадаем все слова.
// else {alert("Вы не угадали. Правильный ответ: " + words[randEngWord][1]);} Если пользователь не угадал, мы выводим сообщение "Вы не угадали. Правильный ответ: " и выводим правильное слово, которым является второй элемент массива. т.к наш массив состоит из  массивов, которые в свою очередь состоят из английского слова - первый элемент масива[0] и из перевода этого слова - второй элемент массива [1].
	var easyWords = [
		["issues", "вопросы"],
		["attached", "прикрепленный"],
		["edit", "редактировать"],
		["merge", "поглощать"],
		["conversation", "разговор"],
	];
// создадим многомерный массив. т. е массив элементами которого также являются массивы. Создали массив words, внутри которого содержатся ещё 5 массивов, каждый из которых содержит 2 элемента - английское слово и его перевод на русский язык.
	askForWords(easyWords)
// Вызываем функцию askForWords, которую создали вначале, для этого просто пишем имя функции, а в скобках пишем параметр. Параметром нашей функции будет многомерный массив easyWords, который встаёт в значение words внутри функции. Далее запускаются команды функции, после выполнения которых мы переходим к нижестоящим командам.
	alert("Поздравляем вы угадали все слова! Попробуйте себя на следующем уровне.");
// после выхода из цикла, когда угадали все слова выводим финальное сообщение. и предлагаем перейти на следующий уровень. 	
	var hurdWords = [
		["back up", "резервное копирование"],
		["create", "создавать"],
		["debug", "отлаживать"],
		["develop", "разрабатывать"],
		["eject", "извлекать"],
		["enable", "активировать"],
		["upload", "закачивать"],
		["database", "база данных"],
	]
// создадим многомерный массив hurdWords  т. е массив элементами которого также являются массивы. внутри которого содержатся ещё 8 массивов, каждый из которых содержит 2 элемента - английское слово и его перевод на русский язык.
	askForWords(hurdWords)
// снова вызываем нашу функцию и в этот раз её пораметру words присваиваем значение переменной hurdWords, которая является многомерным массивом. Выполняем все команды функции, но уже с новыми параметрами из массива hurdWords
	alert("Поздравляем вы угадали все слова!");
// выводим финальное сообщение после того как выполнили все условия функции идём дальше по коду.
</script>


<meta charset="utf-8">
<script type="text/javascript">
// создаём функцию командой function, даём этой функции имя. как к ней можно будет обращаться в дальнейшем в программе и её вызывать. имя функции getRandomNumber . у этой функции будет внутри один параметр переменная (max). Параметры функции указываются в скобках. И в фигурных скобках указываются команды, которые будут выполняться в функции var rand = { Math.round(Math.random() * max ); и return rand; }. Наша функция выполнет всего 2 команды.
	function getRandomNumber(max){
		var rand = Math.round(Math.random() * max );
// Создаём переменную rand. Присваиваем ей случайное значение число от 0 до 1 с большой дробной частью с помощью команды - Math.random(), умножаем ото сгенерированное число на переменную max , которая является параметром функции. А затем с помощью команды Math.round - округляем полученнное в умножении число Math.random() * max до делой части. После выполнения операций в переменной rand хронится некоторое сглучайно сгенерированное число умноженное на параметр функции max. 
		return rand;
// ПОСЛЕ ВЫПОЛНЕНИЯ КОМАНДЫ RETURN , мы выйдем из функции, даже если после return есть какие то команды. и то что было справа от команды return запишится в переменную n m с 
	}
var n = getRandomNumber(100); 
// в переменную n записывается значение rand т.к  getRandomNumber это функция, то в переменную n записывается значение фиункции т.е слоцайно сгенерированное число, умноженное на max , которая в нашем случае Равна 100 getRandomNumber(100) - функция и значение переменной в скобках 100. max =100. в переменную n будет записанно случайное число от 0 до 100 .
var m = getRandomNumber(10) 
// Вызываем функцию getRandomNumber -- переменная max получает значение 10 -- в переменной rand  кодом функции генерируется случайное чсило от 0 до 10 -- команда return возвращает нас из функции обратно -- результат rand записывается в переменную m 
var c = getRandomNumber(4);
// генерируется случайное число от 0 до 4 и присваивается переменной с
</script>


<meta charset="utf-8">
<script type="text/javascript">
// Программа загадывает случайные числа, выводит их на экран и предлагает пользователю запомнить их. Затем пользователь программы должен вспомнить первое число, последнее число и число с произвольным порядковым номером.
function compareAnswer(userAnswer, answer){
	if(userAnswer == answer){
		alert("Это правильный ответ! ");
	} else {
		alert("Ошибка! Правильный ответ " + answer);
	}
}
// Создаём функцию с 2 параметрами: compareAnswer(userAnswer, answer) -- если параметры функции оказываются равными -- выводим на экран сообщение {alert("Это правильный ответ! ");} -- если параметры функции неравны -- выводим на экран сообщение {alert("Ошибка! Правильный ответ " + answer);}
	var numbers = [];
// создаём переменную numbers - пустой массив в который будут помещаться сгенерированные числа
	var x = 4;
// создаём переменную х которая содержит количество чисел, которые нам надо сгенерировать. нам нужно сгенерировать 4 случайных числа и наполнить ими вышестоящий массив var numbers = []; 
	for(var i = 0; i <= x; i++){
		var randomNumber = parseInt(Math.random() * 100);
// создаём переменную randomNumber и присваиваем ей случайное значение Math.random() -- это сгенерированное число от 0 до 1 умножается на 100. -- команда parseInt убирает дробную часть, оставляя случайное число parseInt(Math.random() * 100);
		numbers.push(randomNumber);
// сгенерированное случайное число randomNumber с помощью команды .push отпралвяется в массив numbers numbers.push(randomNumber);
	}
// создаём цикл for (вводим переменную счётчик(var i = 0); пока переменная i счётчик меньше или равна переменной x - в нашем случее 4 (i <= x;); мы к счётчику и прибавляем 1 и проделываем каждый раз условие цикла {var randomNumber = parseInt(Math.random() * 100); numbers.push(randomNumber);} )
	alert("Запомните числа и их порядок: " + numbers);
// выводим сообщение обращаясь к пользователю "Запомните числа и их порядок: " и показываем ему массив numbers который был сгенерирован выше.
	var userAnswer = +prompt("Каким было первое число? ");
// создаём переменную userAnswer которой присвоим значение вводимое пользователем
	compareAnswer(userAnswer, numbers[0])
//	обращаемся к функции compareAnswer где параметрам функции присваиваем значения (userAnswer, numbers[0]), число которое ввёл пользователя и первый элемент массива numbers который был сгенерированн выше.
	userAnswer = +prompt("Каким было последнее число? ");
// просим пользователя ввести число
	compareAnswer(userAnswer, numbers[ numbers.length - 1 ])
//обращаемся к функции compareAnswer где параметрам функции присваиваем значения (userAnswer, numbers[ numbers.length - 1 ]) число которое ввёл пользователя и последний элемент массива numbers который был сгенерированн выше.
 	var  = parseInt(Math.random() * numbers.length);
// создаём переменную и генериnруем в неё случайное число от 0 до х 
	userAnswer = +prompt("Каким было число с порядковым номером  " + (n + 1) + "?" ); 
// просим у пользователя ввести число из массива numbers порядковый номер которого сгенирировали в переменную n
	compareAnswer(userAnswer, numbers[ n ])
// вызываем функцию в которой сравниваем ответ пользователя с правильным ответом

</script>


<meta charset="utf-8">
<script type="text/javascript">
// Функция для вычисления минимума и максимума из 2 ух чисел.	
function max(a, b){
	if(a >= b){
// если (a >= b)
		return a;
// в переменную var a = max(56, 89) котрая вызывает функцию подставляем 56
	} else {
// иначе 
		return b;
//в переменную var a = max(56, 89), котрая вызывает функцию подставляем 89
	}
}
// создали функцию max с двумя параметрами (a, b) -- внутри функции если параметр a больше или равен параметру  b мы в переменную a заданную ниже var a = max(56, 89); помещаем параметр a из функции. 
var a = max(56, 89); 
// задали переменную которой присваиваем значение из функции. большее из 2 ух чисел.56 и 89
</script>


<meta charset="utf-8">
<script type="text/javascript">
// вычислить факториал числа 5! = 1*2*3*4*5
function factorial(n){
	var result = 1; 
// создаём переменную  resalt которая изначально равна 1. в неё мы будем накапливать значения.
		for(var i = 1; i <= n; i++){
// для переменной счётчика i которая изночально равна 1 -- пока  i <= n , где n - параметр нашей функции  выполняем команду условия цикла {result = result * i;} -- после выполнения команды к переменной i прибавляем 1
			result = result * i;
// команда цикл - переменная резалт умножается на переменную счётчика i и результат операции помещается в переменную  result
		}
		return result
// когда цикл выполнится и i > n ПЕРЕМЕННАЯ СЧЁТЧИК i будет больше параметра функции n переменная result которая станет равной и 1*2*3*...*5 т.к n параметр функции равен 5 . когда мы обращаемся к функции командой ниже var c = factorial(5)
}
var c = factorial(5)
// обращаемся к функции факториал и подставляем в параметр функции значение 5 . значение которое вычислит функции присваиваем перемнной с . В переменную с выведится результат работы функции - факториал параметра 5 

</script>


<meta charset="utf-8">
<script type="text/javascript">
// Необходимо разработать рекурсивную функцию для вычисления факториала.
// 5! = 4! * 5 = 1*2*3*4*5 
// 4! = 3! * 4 = 1*2*3*4
// 3! = 2! * 3 = 1*2*3
// 2! = 1! * 2 = 1*2
// 1! = 0! * 1 = 1
// 0! = 1 
// фактариал числа можно вычислить через фактариал предыдущего числа. Функция которая вызывает саму себя называется рекурсивная функция.
// задаём функцию  recurciveFacrorial с одним параметром (n).
	function recurciveFacrorial(n){
// Заметим, что для нолика результат сразу предопределён: 0! = 1. Единственная строчка  значение которой известно сразу. Поэтому ёё и запишем: if(n == 0) в этом случае мы сразу знаем правильные ответ 0!=1.
		if(n == 0){
// 0!=1 поэтому возырвщвем в программу 1.
			return 1;
		}
// Во всех остальных случях механизм вычисления факториала следующий: мы берём факториал от числа n-1 и умножаем его на n. именно это значение и будет являться факториалом для числа n. командой return возвращаем это значение в переменную var rf, которая обращается к факториалу recurciveFacrorial(8) с параметром n = 8.
	} else {
		return recurciveFacrorial(n - 1) * n;
	}

	var rf = recurciveFacrorial(8)
// Создаём переменную rf и присваиваем ей значение функции  recurciveFacrorial(8) с параметром  = 8 . Этой переменной присваивается значение рекурсивной функции
</script> 


<meta charset="utf-8">
<script type="text/javascript">
// Программа обучению слепой печати. 
	function generateText(letters, length){ 
/* // создаём функцию заглушку. данная функция принимает 2 аргумента letters - массив букв, length - длина текста который должен получиться
		// === TO DO ===> {сгенерировать случайную последовательность}
		return "assassaassa"; // для простоты в первой версии будем всегда возвращать одну и туже последовательность символов. Когда убедимся что вся программа работает верно допишем более правильную её реализацию. Часто стакие заглушки помечают комментарием :  === TO DO ===> {что нужно сделать} */
		var text = ""; // создадим переменную в которое будем накапливать данное сообщение. для начала оно пустое. нам надо cгенерировать length случайных букв из массива letters
		for(i = 0; i < length; i++){
// length раз выполняем одну и туже операцию. в этом нам поможет цикл for(i = 0; i < length; i++){...} letters являетсят массивом, и нам нужно выбрать произвольную букву из него. в нашем случае либо первую, либо вторую то есть под номером 0 или под номером 1 
			var n = getRandomNumber(letters.length - 1) // мы уже умеем генерировать случайные числа от 0 до 1. т.к letters.length может иметь призвольную длину из него вычтим единичку и давайте сюдаже добавим реализацию функции getRandomNumber
			text = text + letters[n];// теперь всё что нам остаётся переменной text добавить случайную букву из массива letters/ 
// к концу цикла в переменной текст мы получим готовую последовательность букви именно она будет являться результатом работы нашей функции. 
			
		}
		return text; // возвращаем значение переменной text обратно в программу
	} 
	function getRandomNumber(max){
		return Math.round(Math.random() * max);
	}
	alert("Вас приветствует программа по обучению слепой печати!"); // выводим приветственное сообщение
	while(true){
	alert(" расположите пальцы на клавиатуре правильно! "); // проинструктируем пользователя перед первым упражнением
// Теперь наша программа должна сгенерировать последовательность из 2 ух букв .
	var text = generateText(["a", "s"], 11); // Обычно, если мы понимаем, что в каком то месте нашей программы мы хотим сгенерировать функцию,  мы сразу пишем её вызов. Например так как мы хотим сгенерировать текст я пишу вызов функции generateText() в качестве аргументов мы передадим массив из букв которые надо использовать при генерации данного текста. соответственно для выполнения этого упражнения нам понадобится ["a", "s"] всего лишь 2 буквы , мы хотим чтобы в этой последоватеьности было 11 символов (["a", "s"], 11).
 // в последствии этот же самый вызов можем использовать для генерации любых других последовательностей из букв.
 // к реализации этой функции мы вернёмся позже, представим она отработала и сгенерировала что то типа : sasssassaa ----------------  Такой стиль программирования называется СВЕРХУ ВНИЗ ------------------------ Когда мы сперва намичаем весь курс программы какими то большими блоками , а потом уже спускаемся для реализации каждой конкретной функции.
 // давайте покажем пользователю текст и попросем его набрать этот текст на клавиатуре. 
 	var userText = prompt(text); // создадим переменную и присвоим ей значение и спомощью команды prompt выведим на экран данную последовательность букв. Соответственно пользователь увидит наше сообщение, и в текстовой страке будет стараться воспроизвести то, что мы ему сгенерировали.
 	if(userText == text){ // теперь наша задача сравнить то что написал пользователь с тем, что на самом деле мы сгенерировали . потому что возможны какие нибудь ошибки.
 		alert("УРА! Уровень пройден!"); // в первом случае пользователя традиционно поздравляем
 		break; // выходим из цикла
// А что же делать если пользователь воспроизвёл неправильно эту последовательность? --> var text = generateText(["a", "s"], 11); -->  var userText = prompt(text);   дадим пользователю ещё раз пройти данное упражнение, до тех пор пока он не освоит нужные нам буквы . Получается, что указанные команды: alert(" расположите пальцы на клавиатуре правильно! ");-- мы должны будем выполнять до тех пор, пока полльзователь не ввидёт правильную последовательность символов. Давайте наверху напишем бесконечный цикл внутри которогр пользователь будет выполнять данное упражнени while(true) { не забываем ставить табуляцию}...Таким образом, если пользоватль выполние его верно то он выходит из цикла 
		} else { // в противном случае
			alert("вы сделали ошибку. Вам нужно не допускать ошибок! пересдача!"); // выводим пользователю сообщение о пересдаче и он будет повторять это упражнение т.к окажется в цикле while.
// в качестве функции generateText(["a", "s"], 11); напишем небольшую заглушку :  function generateText([letters, length); - эту функцию создаём в самом начале кода.
//
		}
 	}
</script>



<meta charset="utf-8">
<script type="text/javascript">
// 1. Функции для работы с массивами --> a. Написать функцию, которая принимает в качестве параметра число n. Результатом работы функции является массив из N элементов со значениями 1, 2, 3… n. [1] Написать функцию, которая принимает массив чисел. Результатом работы функции является сумма чисел этого массива. [2]Написать функцию, которая на вход получает массив целых чисел, и в качестве результата возвращает максимальное число. [3] Написать функцию, которая на вход получает массив целых чисел, и в качестве результата возвращает минимальное число. [4] Написать функцию, которая на вход получает массив целых чисел, и в качестве результата возвращает только четные числа из этого массива. Чтобы определить четность числа, воспользуйтесь оператором для подсчета остатка от деления: x % 2. Если остаток от деления числа на 2 равен 0, число будет четное. 2. Добавить в программу по слепой печати еще несколько уровней. a. Уровень 2: Пользователь видит сообщение: «Поставьте мизинец левой руки на букву Ф, безымянный палец — на Ы, средний — на В, указательный — на А. Мизинец правой руки на букву Ж, безымянный палец — на Д, средний — на Л, указательный — на О. Запомните расположение пальцев. Повторяйте за мной». Пользователь получает последовательность из букв Ы и В длиной в 10 символов, и должен её воспроизвести. Если ему это не удалось, попытка повторяется. В случае успеха переходим к следующему уровню. Уровень 3: Пользователь видит сообщение: «Поставьте мизинец левой руки на букву Ф, безымянный палец — на Ы, средний — на В, указательный — на А. Мизинец правой руки на букву Ж, безымянный палец — на Д, средний -— на Л, указательный — на О. Запомните расположение пальцев». Пользователь получает последовательность из букв О и Ж длиной в 10 символов, и должен её воспроизвести. Если ему это не удалось — попытка повторяется. В случае успеха переходим к следующему уровню. 3 Доработать игру в загадки: a. Избавиться в игре в загадки от дублирования кода, используя массивы и функции. b. Сделать так, чтобы программа поддерживала несколько правильных ответов на один и тот же вопрос. Все возможные варианты задаются программистом в коде программы.
// функции для работы с массивами. Функция которая генерирует массив с числами от 1 до n -- ОБРАТИТЕ ВНИМАНИЕ КАК НАЗЫВАЮТСЯ ЭТИ ФУНКЦИИ. ИХ НАЗВАНИЕ ПОЗВОЛЯЕТ ПОНЯТЬ КАКОЙ ОНА НЕСЁТ В СЕБЕ СМЫСЛ.
// Данная функция возвращает возрастающую последовательность чисел от 1 до n .
function getAscSecuence(n){
	var array = []; // создаём пустой массив
	for(var i = 1; i < n; i++){
// пробегаемся по цифрам от 1 до n 
		array.push(i);// добавляем их в массив
	}

	return array; // возвращаем результат 
}
// для подсчёта суммы элементов массива 
function sum(array){
	var sum = 0; // создадим пустую переменную суммы со значением 0 
	for(var i = 0; i < array.length; i++){
		sum += array[i]; // и прибавить к ней поочерёдно все значения элементав массива array[i]
	}
	return sum;
}
// максимальный элемент массива. как найти. 
function max(array){
	var max = array[0]; // предположим, что максимальным элементом массива является первый элемент. Сохраним его значение в переменной max. 
	for(var i = 1; i < array.length; i++){
		if(array[i] > max) // пробежимся по всем значениям массива и сравним все элементы со значением max. Если мы встретим число которое будет больше чем мах, то мы в переменную мах сохраним это значение 
			max = array[i]; // сохраняем это значение в переменную мах
	}
// если массив будет пустым, переменная мах получит значение undefindet, в цикл мы и вовсе не войдём
	return max; // это значение будет возвращено в качестве результата. 
}
// аналогичное решение для подсчёта минимального элемента в массиве
function min(array){
		var min = array[0];
		for(var i = 1; i < array.length; i++){
			if(array[i] < min)
				min = array[i];
		}
		return min;
}
// из массива найти все чётные числа
function getEvenNumbers(array){
	var even = []; // создаём массив, который будет пока пустым
	for(var i = 0; i < array.length; i++){
	//пробежимся с помощью цикла for по всем элементам массива
		if(array[i] % 2 == 0) // и проверим является ли данное число чётным . для проверки на чётность поможет оператор остатка деления % . Если число делится на 2 нацело, то остаток от деления тогда будет равен 0. соответственно если данная проверка вернёт ИСТИНА  
			even.push(array[i]); // то данный элемент массива добавим в массив even
// для элементов массива с нечётными значениями в этот массив мы их добавлять не будем.
	}
	return even;
}

var array = getAscSecuence(5);
alert(array);
alert(sum(array));
alert(max(array));
alert(min(array));
alert(getEvenNumbers(array));
</script>


<meta charset="utf-8">
<script type="text/javascript">
// Программа обучению слепой печати. 
// Нам требуется добавить ещё несколько уровней. У всех уровней логика примерно одинаковая: мы сначала выводим какое то сообщение >alert("Вас приветствует программа по обучению слепой печати!"); < --- > потом генерируем последовательность букв >var text = generateText(["a", "s"], 11); < --->  А кусочек  >var userText = prompt(text);  ... alert("вы сделали ошибку. Вам нужно не допускать ошибок! пересдача!");  < для всех уровней одинаковый ---> соответственно давайте поймём в чём различия между уровнями? ---> они будут отличаться только вот этим текстом >alert(" расположите пальцы на клавиатуре правильно!: \n мизинец левой руки - "a" \n безымянный палец левой руки - "s"");< и последовательностью букв, которую мы используем для генирации текста: >generateText(["a", "s"], 11)<
// таким образом кусок кода >while(true){ ... alert("вы сделали ошибку. Вам нужно не допускать ошибок! пересдача!"); } < . мы можем вывести в функцию и в качестве параметров передавать ей: и текст и набор букв.
	function generateText(letters, length){ 

		var text = ""; 
		for(i = 0; i < length; i++){
			var n = getRandomNumber(letters.length - 1);
			text = text + letters[n];
		}
		return text; 
	}
		
	function getRandomNumber(max){
		return Math.round(Math.random() * max);
	}
// назовём функцию runTraining с парамтрами: brief >alert(brief)< - это некоторый текст который будет вывадиться на экран ; letters - это набор букв >var text = generateText(letters, length<  и также передалим сюда переменную length  это длину последовательности вимволов которую мы будем давать пользователю.---> соответственно внутри функции мы заменили конкретные значения на переменные ><><
	function runTraining(brief, letters, length){
		while(true){
			alert(brief);

			var text = generateText(letters, length);
			var userText = prompt(text);
			if(userText == text){
				alert("ОТЛИЧНО!!!");
				break;
			} else {
				alert("Вы ошиблись.ПЕРЕСДАЧА -->");
			}
		}
	}
// вызвать эти функции достаточно просто : 
	alert("Вас приветствует программа по обучению слепой печати!"); 
// создали переменную brief в которую положили текст 
	var brief = "Положите 4 пальца левой руки на клавиши соответственно:  \n мизинец - a  \n безымянный - s  \n средний - d  \n указательный - f "
// и далее запускаем уровень с данным текстом >brief< последовательностью букв >["a","s"]< состоящий из сгенерированной последовательности  из 13 букв "a","s">13<
	runTraining(brief, ["a","s"], 13);
// аналагичным будет следующий уровень  с буквами "a","d"
	brief = "Положите 4 пальца левой руки на клавиши соответственно:  \n мизинец - a  \n безымянный - s  \n средний - d  \n указательный - f \n 3!2!1! - ПОЕХАЛИ!!!!!" ;

	runTraining(brief, ["a","d"], 16);
// Ну и в принципе все последующие будут реалтзовываться по аналогии. 
	brief = "Положите 4 пальца правой руки на клавиши соответственно:  \n мизинец - l  \n безымянный - k  \n средний - j \n указательный - h \n ГЕНЕРИРУЕМ ПОСЛЕДОВАТЕЛЬНОСТЬ ИЗ l и k " 

	runTraining(brief, ["l","k"], 11);
// мы также обратили внимание что часто выполняем один и тот же код вызывая функцию >runTraining< в принципе от этого дублирования можно было бы тоже избавиться с помощью циклов, но 
// TO DO ! ---> избавится с помощью циклов
	brief = "Положите 4 пальца правой руки на клавиши соответственно:  \n мизинец - l  \n безымянный - k  \n средний - j \n указательный - h \n трррр!!!  ГЕНЕРИРУЕМ ПОСЛЕДОВАТЕЛЬНОСТЬ ИЗ h и l  " 

	 runTraining(brief, ["h","l"], 18);

	/* while(true){
	alert(" расположите пальцы на клавиатуре правильно!: \n мизинец левой руки - "a" \n безымянный палец левой руки - "s"");
	var text = generateText(["a", "s"], 11); 
 	var userText = prompt(text); 
 	if(userText == text){ 
 		alert("УРА! Уровень пройден!");
 		break; 
		} else { 
			alert("вы сделали ошибку. Вам нужно не допускать ошибок! пересдача!"); 
		}
 	} */
</script>



<meta charset="utf-8">
<script type="text/javascript">

	/* Игра в загадки
a. Загадать загадку. Если ответ верен – поздравить пользователя. Затем сообщить, что игра окончена.
b. Если ответ неверный – написать пользователю, что он не угадал.
c. Добавить еще 3 загадки. Подсчитать количество правильных ответов, сообщить пользователю.
d. (По желанию). В качестве верного ответа принимать несколько вариантов ответов. Например, «Стул», «стул», «табуретка» и так далее. */

// Игроку загадываются загадки >var userAnswer = prompt("Я хочу сыграть с тобой в одну игру...\n Угадай загадку:\n ЗИМОЙ И ЛЕТОМ ОДНИМ ЦВЕТОМ. ЧТО ЭТО? \n "); < ---> он пытается их угадать >if(userAnswer == "елка" || userAnswer == "доллар" )< ---> И в конце ему сообщалось сколько загадок было отгадано верно. >alert("У вас " + score + " правильных ответов ")< 
// Задача была решена, однако здесь очень много дублируется в коде : чтобы добавить каждую новую загадку, нужно продублировать участок кода >userAnswer = prompt("СКОЛЬКО СЕРДЕЦ У ОСЬМИНОГА?"); --- alert("Не угадал!");<  ---> вынесем  это всё в отдельную функцию. в качестве параметра она будет получать формулировку загадки 
	function askQuestion(question, answer){
		var userAnswer = prompt(question);
		userAnswer = userAnswer.toLowerCase();
		if(userAnswer == answer){
				alert("Угадал. Возьми с полки пиражок!");
			score++; // внутри нашей программы мы создали переменную >score< а теперь используем её внутри функции
		} else {
			 alert("!ОШИБОЧКА!");
		}
	}
// т.к ответов может быть несколько, вместо переменной ,>var answer = < можем использовать массив.
/*  Массив в кечестве 2 ого параметра функции 
	function askQuestion(question, answers){
		var userAnswer = prompt(question);
		userAnswer = userAnswer.toLowerCase();
		for(var i = 0; i < answers.length;){
		if(userAnswer == answers[i]){
				alert("Угадал. Возьми с полки пиражок!");
				score++; // внутри нашей программы мы создали переменную >score< а теперь используем её внутри функции
				return;

			}
		
			 alert("!ОШИБОЧКА!");
		}
	}
	var score = 0;

	askQuestion("функция, которая не имеет определения. Её переопределяют дочерние классы это - ", ["абстрактная функция", "abstract"]);
	askQuestion(" ошибка в программе/коде, из-за которой результаты выполнения программы неправильные.",["баг","bug"]);
	askQuestion(" обучающее мероприятие для работников из определенной сферы деятельности (например, программистов, фотографов или дизайнеров",["воркшоп","workshop");

	// т.к ответов несколько мы пробегаемся по всему иассиву правильных ответов и сравниваем то что написал пользователь с правильными ответами
*/

	var score = 0; // внутри нашей программы мы создали переменную score а теперь используем её внутри функции. До сих пор мы работали только с теми параметрами, которые сами же передали в данную функцию. Тагие перемены называются глобальными: один и тот же экземпляр данной переменной используется при всех вызовах функции

// это решение является хорошим, а так у нас если посмотреть ещё присутствует дублирование кода: много раз подряд вызываем функцию askQuestion
	askQuestion("функция, которая не имеет определения. Её переопределяют дочерние классы это - ", "абстрактная функция");
	askQuestion(" ошибка в программе/коде, из-за которой результаты выполнения программы неправильные.","баг");
	askQuestion(" обучающее мероприятие для работников из определенной сферы деятельности (например, программистов, фотографов или дизайнеров","воркшоп");
	askQuestion("инструкция, руководство.","гайд");
	askQuestion("крайний срок выполнения или сдачи проекта/задания/работы.","дедлайн");
	askQuestion("аппаратное обеспечение (комплектующие) устройства (например, компьютеров, ноутбуков или смартфонов).","железо");
	askQuestion("не справиться с выполнением поставленной задачи.","зафакапить");
	askQuestion("т англ. «In My Humble Opinion») — по моему скромному мнению.","ИМХО");
	askQuestion("реальная ситуация (или случай), которая произошла с автором.","кейс");
	askQuestion("задержка в выполнении программы/игры, отсутствие реагирования на действия пользователя. Синоним к термину «глюк».","лаг");
	askQuestion(" это совокупный тип данных, который позволяет получить доступ ко всем переменным одного и того же типа данных через использование одного идентификатора.","массив");
	askQuestion(" родной. Часто используют выражение «нативный код» — исходный код (не модифицированный позже), написанный разработчиками.","нативный");
	askQuestion("возвращение на исходную позицию.","откат");
//  askQuestion("","");
// как можно избежать многократного повторения обращения к функции askQuestion 
/*
например можем создать многомерный массив questions у которого в качестве первого элемента всегда хранится формулировка задачи,  а в качестве второго - правильные ответы

 ... alert("!ОШИБОЧКА!");
		}
var questions = [
	["вопрос 1", ["ответ1","ответ2"]],
	["вопрос 2",["ответ1","ответ2"]]
];

var score = 0;
// Теперь в цикле for пробежались по всем вопросам
for(var i = 0; i < questions.length;i++){
	var quest = question[i][0];
	var answers = question[i][1];
	askQuestion(quest, answers) 
// и вызвать функцию askQuestion(quest, answers) для нулевого и первого элемента массива questions
alert("вы угадали" + score)
}

*/
	alert("Вы набрали пирожков: " + score);
// 

// TO DO ---> А из скольки?
/*  СТАРЫЙ ВАРИАНТ
	var userAnswer = prompt("Я хочу сыграть с тобой в одну игру...\n Угадай загадку:\n ЗИМОЙ И ЛЕТОМ ОДНИМ ЦВЕТОМ. ЧТО ЭТО? \n "); 

	var score = 0;
	userAnswer = userAnswer.toLowerCase()
	if(userAnswer == "елка" || userAnswer == "доллар" ){

		alert("Праывльно! Возьми с полки пиражок!"); 
		score++;
	} else {
		alert("Не угадал!"); 
	}

	userAnswer = prompt("СКОЛЬКО СЕРДЕЦ У ОСЬМИНОГА?");
	userAnswer = userAnswer.toLowerCase();
	if(userAnswer == "четыре" || userAnswer == "4" ){
		alert("Праывльно! Возьми с полки пиражок!");
		score++; 
		} else {alert("Не угадал!");
	}
	userAnswer = prompt("Кто президент России?");
	userAnswer = userAnswer.toLowerCase();
	if(userAnswer == "путин"){
		alert("Праывльно! Возьми с полки пиражок!");
		score++;
	} else {
		alert("Не угадал!");
	}
	alert("У вас " + score + " правильных ответов ")
*/
</script>



__________________________________________________________________________
                       finish course
__________________________________________________________________________




*** HTML COURSE ***

/* напишим свой сайт и разместим в нём написанные программки . */
// нам понадобится язык разметки HTML ---> создадим папку. В сублайме текст создаём новый файл и сохронаем его в эту папку под именем index.html ---> название важное должно быть именно таким, почему станет  чсно чуть позже. 
// В любом html документе присутствует несколько обязательных строчек. 
// html и нажимаем TAB! => появится cтруктура html документа
<!DOCTYPE html>  
<html>
<head>
	<title></title>
</head>
<body>

</body>
</html>
// Здесь есть теги, открывающиеся, закрывающиеся. например <html></html>.  Всё что находится между этими тегами - html документ. 
//
//
<!DOCTYPE html> // начинается документ с этого специального тега. 
// внутри тега <html></html> присутствуют ещё 2 тега: <head></head> и <body></body>. - голова и тело.Давайте напишем что нибудь в голове и в теле...

<html>
<head>
	
</head>
<body>
Тело
</body><title>Голова</title>
</html>
//  запустим этот файл ---> всё что мы написали между тегами <title>Голова</title> оказалось в наверху в тексте вкладки, всё что внутри тега <body>Тело</body> оно распологается непосредственно на нашей странице. 
//Многие видели непонятные символы вместо русских символов  исправляется с помощью <meta charset="utf-8">
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>afterEducetionCourse</title>
</head>
<body>
будущее тело этого сайта
</body>
</html>
//Давайте начнём придавать нашему сайту осмысленное содержание: Даём имя сайту в теге <title>afterEducetionCourse</title> изменив тег му увидим после обновления страницы увидим изменение в названии загаловка вкладки. 
// Было бы неплохо, если бы наш документ начинался с заголовка. Сециальный тег <h1></h1> . порядковый номер после заголовка - эh1то его размер. h1 - самый большой . Тег открыли, Тег закрыли, между тэгом пишем текст. Сохраняем обнавляем. получили большой заголовок. существует целая иерархия заголовков. и можно сделать несколько заголовков поменьше . чем больше цифра в h , тем меньше заголовок по размеру. 
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>afterEducetionCourse</title>
</head>
<body>
<h1>ЧЕГО Я ДОСТИГ ПРОЙДЯ КУРС ОСНОВЫ ПРОГРАММИРОВАНИЯ?:</h1>
</body>
</html>.

// Оставим 1 заголовок и дальше напишем какой нибудь текст. Т.к это наш личный сайт , поэтому напишем о себе .
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>afterEducetionCourse</title>
</head>
<body>
<h1>ЧЕГО Я ДОСТИГ ПРОЙДЯ КУРС ОСНОВЫ ПРОГРАММИРОВАНИЯ?:</h1>

Я приветствую вас на своём сайте! Я недавно начал обучаться и сейчас прохожу уже 8 ой урок. Обучение подходит к концу и вот выполняю практическое задание разрабатываю сейчас сайт. Я сейчас в теле этого сайта печатаю и рассказываю о себе.

</body>
</html>

//каждый параграф желательно помещать в тег <p></p> помещаем три обзаца в тег  <p></p>
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>afterEducetionCourse</title>
</head>
<body>
<h1>ЧЕГО Я ДОСТИГ ПРОЙДЯ КУРС ОСНОВЫ ПРОГРАММИРОВАНИЯ?:</h1>

 <p>  Я приветствую вас на своём сайте! Я недавно начал обучаться и сейчас прохожу уже 8 ой урок. Обучение подходит к концу и вот выполняю практическое задание разрабатываю сейчас сайт. Я сейчас в теле этого сайта печатаю и рассказываю о себе.</p>

 <p> Наверное стоит рассказать о себе. Я учусь на факультете искуственного интеллекта. Я хожу в гараж. я люблю отдыхать и товары по акции. Учить буду язык программирование питон. Криптотрейдер. Хотел бы создать крутого торгового бота, да и вообще научиться делать ботов и компьютерных помошников</p>

<p> Спасибо за обучение, потому что я начинал пргграммистом (-10) ого уровня, я был чайник-сеньёр. А после того как я доделаю все занятия и упражнения по этому курсу основы программирования и допишу этот самый сайт в который я сейчас в данный момент набираю текст, то я получу стабильный 1 уровень ДЖУНИОРА.Ппосле оконсания курса <br>  Я ДЖУНИОР 1 </p>

</body>
</html>



// Мы получили 3 обзаца. также существуют специальные теги, которые помогают отредактировать текст <b> - Жирный <i> - курсив, 
	<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>afterEducetionCourse</title>
</head>
<body>
<h1>ЧЕГО Я ДОСТИГ ПРОЙДЯ КУРС ОСНОВЫ ПРОГРАММИРОВАНИЯ?:</h1>

 <p>  Я приветствую вас на своём сайте! Я недавно начал обучаться и сейчас прохожу <b>уже 8 ой</b> урок. Обучение подходит к концу и вот выполняю практическое задание разрабатываю сейчас сайт. Я сейчас в теле этого сайта печатаю и рассказываю о себе.</p>

 <p> <b>Наверное стоит рассказать о себе.</b> Я учусь на факультете искуственного интеллекта. Я хожу в гараж. я люблю отдыхать и товары по акции. Учить буду язык программирование питон. Криптотрейдер. Хотел бы создать крутого торгового бота, да и вообще научиться делать ботов и компьютерных помошников</p>

<p> Спасибо за обучение, потому что я начинал пргграммистом (-10) ого уровня, я был чайник-сеньёр. А после того как я доделаю все занятия и упражнения по этому курсу основы программирования и допишу этот самый сайт в который я сейчас в данный момент набираю текст, то я получу стабильный 1 уровень ДЖУНИОРА.Ппосле оконсания курса <br>  <b><i>Я ДЖУНИОР 1</i></b> </p>

</body>
</html>



//Тепер мы хотим добавить ссылку. в этом нам поможет тег <a> от слова ancore - якорь. Мы открываем тег а и в нутри тега а используем так называемые атрибуты. в атрибутах будем указывать некоторые значения которые нам нужны для корректного отображения нашей html страницы. у тега  <a href="" > есть атрибут href гиперреференс, мы говорим что его значение будет ровно  <a href="www." > ссылке на внешний сайт. далее мы указываем текст, который будет внутри ссылки <a href="www.">ИДИ ТУДА</a> > и закрываем тег а. 

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>afterEducetionCourse</title>
</head>
<body>
<h1>ЧЕГО Я ДОСТИГ ПРОЙДЯ КУРС ОСНОВЫ ПРОГРАММИРОВАНИЯ?:</h1>

 <p>  Я приветствую вас на своём сайте! Я недавно начал обучаться и сейчас прохожу <b>уже 8 ой</b> урок. Обучение подходит к концу и вот выполняю практическое задание разрабатываю сейчас сайт. Я сейчас в теле этого сайта печатаю и рассказываю о себе.</p>

 <p> <b>Наверное стоит рассказать о себе.</b> Я учусь на факультете искуственного интеллекта. Я хожу в гараж. я люблю отдыхать и товары по акции. Учить буду язык программирование питон. Криптотрейдер. Хотел бы создать крутого торгового бота, да и вообще научиться делать ботов и компьютерных помошников <br> <br> <a href="www.">ИДИ ТУДА</a> </p>

<p> Спасибо за обучение, потому что я начинал пргграммистом (-10) ого уровня, я был чайник-сеньёр. А после того как я доделаю все занятия и упражнения по этому курсу основы программирования и допишу этот самый сайт в который я сейчас в данный момент набираю текст, то я получу стабильный 1 уровень ДЖУНИОРА.Ппосле оконсания курса <br>  <b><i>Я ДЖУНИОР 1</i></b> </p>

</body>
</html>




//Разместим в самом верху перед заголовком страницы разместим ссылки на наши программки :
<a href="#"> используем # пока что вместо заглушки.  напишем название страницы и закроем тег <a href="#">Главная</a>

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>afterEducetionCourse</title>
</head>
<body>

<a href="#">Главная</a>
<a href="#">Важная</a>
<a href="#">Продуктивная</a>
<a href="#">Гостевая</a>
<a href="#">Загадочная</a>

<h1>ЧЕГО Я ДОСТИГ ПРОЙДЯ КУРС ОСНОВЫ ПРОГРАММИРОВАНИЯ?:</h1>

 <p>  Я приветствую вас на своём сайте! Я недавно начал обучаться и сейчас прохожу <b>уже 8 ой</b> урок. Обучение подходит к концу и вот выполняю практическое задание разрабатываю сейчас сайт. Я сейчас в теле этого сайта печатаю и рассказываю о себе.</p>

 <p> <b>Наверное стоит рассказать о себе.</b> Я учусь на факультете искуственного интеллекта. Я хожу в гараж. я люблю отдыхать и товары по акции. Учить буду язык программирование питон. Криптотрейдер. Хотел бы создать крутого торгового бота, да и вообще научиться делать ботов и компьютерных помошников <br> <br> <a href="www.">ИДИ ТУДА</a> </p>

<p> Спасибо за обучение, потому что я начинал пргграммистом (-10) ого уровня, я был чайник-сеньёр. А после того как я доделаю все занятия и упражнения по этому курсу основы программирования и допишу этот самый сайт в который я сейчас в данный момент набираю текст, то я получу стабильный 1 уровень ДЖУНИОРА.Ппосле оконсания курса <br>  <b><i>Я ДЖУНИОР 1</i></b> </p>

</body>
</html>




// у нашей странички появилась так называемая шапка - верхняя панель меню из ссылок с навигацией по странице Обычна у страниц есть так называемый футтер - информация которая распологается снизу страницы. например значок Copycight &copy; 

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>afterEducetionCourse</title>
</head>
<body>

<a href="#">Главная</a>
<a href="#">Важная</a>
<a href="#">Продуктивная</a>
<a href="#">Гостевая</a>
<a href="#">Загадочная</a>

<h1>ЧЕГО Я ДОСТИГ ПРОЙДЯ КУРС ОСНОВЫ ПРОГРАММИРОВАНИЯ?:</h1>

 <p>  Я приветствую вас на своём сайте! Я недавно начал обучаться и сейчас прохожу <b>уже 8 ой</b> урок. Обучение подходит к концу и вот выполняю практическое задание разрабатываю сейчас сайт. Я сейчас в теле этого сайта печатаю и рассказываю о себе.</p>

 <p> <b>Наверное стоит рассказать о себе.</b> Я учусь на факультете искуственного интеллекта. Я хожу в гараж. я люблю отдыхать и товары по акции. Учить буду язык программирование питон. Криптотрейдер. Хотел бы создать крутого торгового бота, да и вообще научиться делать ботов и компьютерных помошников <br> <br> <a href="www.">ИДИ ТУДА</a> </p>

<p> Спасибо за обучение, потому что я начинал пргграммистом (-10) ого уровня, я был чайник-сеньёр. А после того как я доделаю все занятия и упражнения по этому курсу основы программирования и допишу этот самый сайт в который я сейчас в данный момент набираю текст, то я получу стабильный 1 уровень ДЖУНИОРА.Ппосле оконсания курса <br>  <b><i>Я ДЖУНИОР 1</i></b> <br><br> 
<a href="#">Главная</a>,
<a href="#">Важная</a>,
<a href="#">Продуктивная</a>,
<a href="#">Гостевая</a>,
<a href="#">Загадочная</a>
</p>

Copycight &copy;  Yurgen Slavniy

</body>
</html>




//Добавим картинку. для картинок рекомендованно создавать специальную папку img  . указываем путь к картинке...<img src="img/ava.jpg">

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>afterEducetionCourse</title>
</head>
<body>

<a href="#">Главная</a>
<a href="#">Важная</a>
<a href="#">Продуктивная</a>
<a href="#">Гостевая</a>
<a href="#">Загадочная</a>

<h1>ЧЕГО Я ДОСТИГ ПРОЙДЯ КУРС ОСНОВЫ ПРОГРАММИРОВАНИЯ?:</h1>

<img src="img/ava.jpg">

 <p>  Я приветствую вас на своём сайте! Я недавно начал обучаться и сейчас прохожу <b>уже 8 ой</b> урок. Обучение подходит к концу и вот выполняю практическое задание разрабатываю сейчас сайт. Я сейчас в теле этого сайта печатаю и рассказываю о себе.</p>

 <p> <b>Наверное стоит рассказать о себе.</b> Я учусь на факультете искуственного интеллекта. Я хожу в гараж. я люблю отдыхать и товары по акции. Учить буду язык программирование питон. Криптотрейдер. Хотел бы создать крутого торгового бота, да и вообще научиться делать ботов и компьютерных помошников <br> <br> <a href="www.">ИДИ ТУДА</a> </p>

<p> Спасибо за обучение, потому что я начинал пргграммистом (-10) ого уровня, я был чайник-сеньёр. А после того как я доделаю все занятия и упражнения по этому курсу основы программирования и допишу этот самый сайт в который я сейчас в данный момент набираю текст, то я получу стабильный 1 уровень ДЖУНИОРА.Ппосле оконсания курса <br>  <b><i>Я ДЖУНИОР 1</i></b> <br><br> 
<a href="#">Главная</a>,
<a href="#">Важная</a>,
<a href="#">Продуктивная</a>,
<a href="#">Гостевая</a>,
<a href="#">Загадочная</a>
</p>

Copycight &copy;  Yurgen Slavniy

</body>
</html>




//C точки зрения контента наша страничка готова. Больше никакого текста, никаких картинок сюда мы больше добавлять не будем. На следующем уроке познакомимся с технологией CSS .
//
//
//
//
__________________________________________________________________________

lesson2 css 

__________________________________________________________________________

// технология CSS . Каскадная таблица  стилей.  --> начнём с чего нибудь простого и попробуем сделать какой нибудь цвет фона.  т. к мы хотим применить некоторое правило ко все страничке то работать мы будем с тегом боди. <body style="background-color: yellow"> мы можем написать что стиль тега боди такой. если работаем с заголовком, то к нему приминяем стиль <h1 style="..."> в принципе раньше так и делали, НО! очень стильно разрастается хтмл документ, гогда начинаем добавлять всякие стили. 2о1 большой недостаток -  когда я начну создавать новые странички сайта, то для этих страниц тоже должны применяться свои стили, 
// хтмл является достаточно простой технологией мы рассмотрели в 1 ом уроке более половины самых популярных тегов. она ничего из себя сложного не представляет. И получается надо всё это дублировать весь код стилей. 
// существует возможность все стили расположить в одном файле, а потом его применять во всех хтмл документах, в которых это требуется. 
// создадим новый файл ctrl+N и наазовём его style.css и начнём переносить все наши стили в этот файл.

// Синтаксис здесь такой. если я хочу применить какое то правило к тегу боди . Я пишу боди {} и внутри фигурных скобок перечисляем все парвила, которые хотим использовать 

body{
	background-color: yellow;
	font-size: 16px;
}

h1{
	color: green;
}


// в файле index.html надо указать путь к файлу со стилями. в файде index.html пишем специальный тег . Внутри тега хеад , добавляется ссылка к нашему документу, тип этого документа это stylesheet страничка со стилями, и указываем, что называется он style.css <link rel="stylesheet" href="style.css">

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>afterEducetionCourse</title>
	<link rel="stylesheet" href="style.css">
</head>



// Как жесделать нашу страничку красивой? разработка красивого дизайна сайта, его оформление это вообще не компетенция веб разработчика. Занимается этим специалист. 
зовут его ДИЗАЙНЕР. 
//прежде чем начинается разработка сайта, дизайнер садится в фотошопе и рисует просто картинку на которой видно где и как будет выглядить сайт. как правило в формате psd у нас есть psd документ , картинку которую мы получили от дизайнера . задача разработчика сделать также как на картинке. 
//assets.adobe.com бесплатный инструмент для psd файлов
//Начнём с оформления верхней менюшки.
сгруппируем наши ссылки с помощью тега div. внутри добавим табуляциб, чтобы было видно что ссылки внутри данного тега. 

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>afterEducetionCourse</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
<div>
	<a href="#">Главная</a>
	<a href="#">Важная</a>
	<a href="#">Продуктивная</a>
	<a href="#">Гостевая</a>
	<a href="#">Загадочная</a>
</div>	

// далее попробуем оформить этот тег в style.css и наполняем его стилями. например : border-width: 0.14px; - ширина рамочки 0.14px; border-color: #76645 - цвет рамки; border-style: solid - сплошная рамка по периметру будет сплошная линия;  background-color: #576 - цвет фона ;

div{
	background-color: yellow;
	border-width: 0.14px;
	border-color: #b5b7ba;
	border-style: solid;
	background-color: #dfdfdf;
	height: 88px;
}


//Теперь было бы неплохо все эти менюшечки расположить где нибудь по центру экрана. Применяем цвет, цвет шрифта, высоту фона и выравнивание текста. Мы пишем а т.к нас интересует именно оформление тега а. и не любой а только тот, который находится внутри div

div a {
	color: #4d4d4d;
	font-size: 20px;
	font-weight: 100;
	text-align: center;
}
//для выравнивания текста text-align: center; к блоку div

div{
	background-color: yellow;
	border-width: 0.14px;
	border-color: #b5b7ba;
	border-style: solid;
	background-color: #dfdfdf;
	height: 88px;
	text-align: center;
}


// не очень здорово то что ссылки прилипли к верхнему краю, давайте сделаем небольшой отступ. padding-top применяется к блоку div и указывает как внутри этого тега должны размещаться элементы. с каким отступом 

div{
	background-color: yellow;
	border-width: 0.14px;
	border-color: #b5b7ba;
	border-style: solid;
	background-color: #dfdfdf;
	height: 70px;
	text-align: center;
	padding-top: 18px;
}

// Также нехорошо, что ссылки слишком близко к друг другу расположены. между ними надо также сделать отступы. padding-right применяем к div a 

div a {
	color: #4d4d4d;
	font-size: 20px;
	font-weight: 100;
	padding-right: 25px;
}


//Перейдём к оформлению нижнего меню. как сделать так, чтобы для разных дивов применять разные стили будем применять атрибут класс. С его помощью сможем отличать различные теги друг от друга. прописываем теги для футера

.footer{
	background-color: #434445;
	height: 80px;
	padding-top: 60px
	color: #a4a4a4;
	font-weight: 100;
	text-align: center;
}

// Мы познакомились с технологиями html и css . с помощью html наполняем сайт контентом. с помощью css делаем его красивым.

//
__________________________________________________________________________






